#+title: Emacs Configuration
#+author: Peter Borocz
#+email: peter.borocz@gmail.com
#+options: num:nil

* Packages
Alphabetically list as it's easy to find things reasonably quickly and
coming with any other grouping is fraught with ambiguities.
** emacs
#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :init
    (setq
     auto-save-default                      nil       ; Stop creating autosaving files (we setup/use bbatsov's auto-save instead)
     blink-cursor-interval                  0.3       ; Default is 0.5
     blink-cursor-mode                      1
     create-lockfiles                       nil       ; We don’t need lockfiles since were ONLY single-user!
     column-number-mode                     t
     debug-on-error                         nil
     debug-on-signal                        nil
     debug-on-quit                          nil
     default-directory                      (concat (getenv  "HOME") "/")
     fill-column                            96
     font-lock-maximum-decoration           t
     frame-title-format                     '("%b " (:eval (format-time-string "%H:%M - %Y-%m-%d")))
     global-auto-revert-non-file-buffers    t         ; Revert Dired and other buffers on changes
     global-font-lock-mode                  1
     indent-tabs-mode                       nil ; Make sure spaces are used when indenting anything!
     inhibit-compacting-font-caches         t         ; https://github.com/sabof/org-bullets/issues/11#issuecomment-439228372
     inhibit-default-init                   t
     inhibit-splash-screen                  t
     initial-scratch-message                nil       ; Start scratch buffers empty..
     make-backup-files                      nil       ; Stop creating backup~ files
     ring-bell-function                     'ignore
     search-highlight                       t
     sentence-end-double-space              nil       ; Period single space ends sentence
     switch-to-buffer-obey-display-actions  t         ; https://www.masteringemacs.org/article/demystifying-emacs-window-manager Switching Buffers
     truncate-lines                         t   ; Start out with NO line truncation.
     uniquify-after-kill-buffer-p           t         ; Rename after killing uniquified
     uniquify-buffer-name-style             'forward  ; https://github.com/bbatsov/prelude
     uniquify-ignore-buffers-re             "^\\*"    ; Don't muck with special buffers
     uniquify-separator                     "/"
     use-dialog-box                         nil       ; Don't popup UI dialogs when prompting
     use-short-answers                      t ; Used for emacs >= 29.
     user-full-name                         "Peter Borocz"
     vc-follow-symlinks                     t         ; https://stackoverflow.com/questions/15390178/emacs-and-symbolic-links#15391387
     visible-bell                           t
     word-wrap                              nil
     x-stretch-cursor                       t
     yank-excluded-properties              't ; Clipboard yank is pasting graphics from microsoft instead of text. Strip all properties!
     ))

  ;; In emacs 29+, seems like toggle-debug-on-quit is flipped to T by default,
  ;; causing C-g for minibuffer-quit to start the debugger(!). We don't want that.
  ;; per https://emacs.stackexchange.com/questions/70177/how-can-i-apply-toggle-debug-on-quit-ignore-debugger-entered-lisp-error/70180
  (add-to-list 'debug-ignored-errors 'minibuffer-quit)

  ;; Define all aliases
  (defalias 'list-buffers 'ibuffer)  ; Use ibuffer default for all buffer management

  ;; We want y or n to be sufficient for yes/no prompts.
  ;; (defalias 'yes-or-no-p 'y-or-n-p) ;; Used for emacs <29

  ;; Don't let Emacs suspend by getting rid of pesky "\C-z" and "\C-x\C-z" annoying minimize
  (unbind-key "C-z")
  (unbind-key "M-z")

  (global-auto-revert-mode 1) ;; refresh a buffer if changed on disk
  (recentf-mode 1)            ;; remember recently edited files (M-x recentf-open-files to show)

  (use-package paren
    :ensure nil ; Already part of emacs itself
    :init
    (setq show-paren-delay 0)  ; We want matching parens to show immediately
    :config
    (show-paren-mode t))
#+end_src
** anzu
Highlight global-search-replace strings dynamically.
#+begin_src emacs-lisp
  (use-package anzu
    :config
    (global-anzu-mode)
    )
  (global-set-key (kbd   "<f6>") 'anzu-query-replace)
  (global-set-key (kbd "C-<f6>") 'anzu-query-replace-regexp)
#+end_src
** aspell
Live spell checking.
NOTE!: This requires a local/manual installation (ie. outside emacs)!
#+begin_src emacs-lisp
  (setq ispell-program-name "/usr/local/bin/aspell")
  (add-to-list 'ispell-skip-region-alist '("^#+BEGIN_SRC" . "^#+END_SRC"))
#+end_src
** calendar
#+begin_src emacs-lisp
  (use-package calendar
    :custom
    (calendar-mark-holidays-flag t)
    (calendar-date-style 'iso))
#+end_src
** company
[[Https://emacs.stackexchange.com/questions/13286/how-can-i-stop-the-enter-key-from-triggering-a-completion-in-company-mode][How can I stop the enter key from triggering a completion in company mode?]]
#+begin_src emacs-lisp
  (use-package company
    :delight company-mode  ;; Turns off the listing of company mode in list of minor modes (e.g. modeline)

    :demand t

    :init
    (setq company-idle-delay 0.1
          company-minimum-prefix-length 1)

    :bind (:map company-active-map
           ("C-n" . company-select-next)
           ("C-p" . company-select-previous))

    :config
    (global-company-mode))
#+end_src
** css
#+begin_src emacs-lisp
  (use-package css-mode
    :custom
    (css-indent-offset 2))
#+end_src
** csv
#+begin_src emacs-lisp
 (use-package csv-mode
   :init
   (add-to-list 'auto-mode-alist '("\\*.csv$" . csv-mode))
   (add-to-list 'auto-mode-alist '("\\*.tsv$" . csv-mode))
 )
#+end_src
** dired
[[https://github.com/MatthewZMD/.emacs.d]]
[[https://www.emacswiki.org/emacs/DiredSortDirectoriesFirst][Sort dired listings with directories first]]
*** dired
#+begin_src emacs-lisp

  ;; Want ability to open a file in the same window as dired (ie. replacing dired with the file).
  (defun pb/dired-find-file-same-window ()
    "Open file in the same window."
    (interactive)
    (find-file (dired-get-file-for-visit)))


  (use-package dired
    :ensure nil

    :config
    (add-hook 'dired-mode-hook
              (lambda () (setq truncate-lines nil)))

    :bind
    (("C-x C-d" . dired-jump)
     ("C-x j"   . dired-jump-other-window)
     )

    :config
    (define-key dired-mode-map (kbd "s") '_pb-dired-sort)
    (define-key dired-mode-map (kbd "e") 'pb/dired-toggle-read-only) ; Inline filename editing!
    (define-key dired-mode-map (kbd "E") 'pb/dired-find-file-same-window)
    (define-key dired-mode-map (kbd ".") 'dired-up-directory)

    (setq auto-revert-verbose                 nil ;; Auto refresh Dired, but be quiet about it
          delete-by-moving-to-trash           t
          dired-dwim-target                   t
          dired-hide-details-mode             nil
          dired-listing-switches              "-Al" ;; and see below for dired-sort.
          dired-recursive-copies              'always
          dired-recursive-deletes             'always
          dired-use-ls-dired                  t
          global-auto-revert-non-file-buffers t
          insert-directory-program            "/usr/local/bin/gls"
          wdired-allow-to-change-permissions  t
          )
    )

  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil))
  ;;
  ;; Color our dired display by type of file/directory
  ;; https://github.com/purcell/diredfl
  ;;
  (add-hook 'dired-mode-hook 'diredfl-mode)

  ;; Want ability to sort by more than just 2 dimensions, thus, override "s" for choices.
  ;; HT: http://xahlee.info/emacs/emacs/dired_sort.html
  (defun _pb-dired-sort ()
    (interactive)
    (let (sort_by ls_arg)
      (setq sort_by (completing-read "Sort by:" '( "Date" "Size" "Name" "Dir" )))
      (cond
       ((equal sort_by "Name") (setq ls_arg "-Alh "))
       ((equal sort_by "Date") (setq ls_arg "-Alh -t"))
       ((equal sort_by "Size") (setq ls_arg "-Alh -S"))
       ((equal sort_by "Dir" ) (setq ls_arg "-Alh --group-directories-first"))
       (t (error "Sorry, that didn't work 🤦" )))
      (dired-sort-other ls_arg )))


#+end_src
*** dired-gitignore
Toggle between showing just ".git-ted" files and all files.
#+begin_src emacs-lisp
  (use-package dired-gitignore
    :ensure t
    :config
    (define-key dired-mode-map (kbd "H") #'dired-gitignore-global-mode) ;; into your startup files. Then you will hide and show the gitignored files in a dired buffer by hitting the H key.
    )
#+end_src
** eglot
- [[https://github.com/joaotavora/eglot][GitHub - joaotavora/eglot: A client for Language Server Protocol servers]]
- [[https://ddavis.io/posts/emacs-python-lsp/][Python with Emacs: py(v)env and lsp-mode]]
- [[https://whatacold.io/blog/2022-01-22-emacs-eglot-lsp/][Eglot for better programming experience in Emacs - whatacold's space]]
*** eglot
#+begin_src emacs-lisp
  ;; https://grtcdr.tn/dotfiles/emacs/emacs.html#orgdb7d3a6
  (use-package eglot
    :commands
    (eglot eglot-ensure)

    :hook
    ((python-ts-mode yaml-ts-mode) . eglot-ensure)

    :bind
    (:map eglot-mode-map
          ("C-c e a" . eglot-code-actions)
          ("C-c e f" . eglot-format)
          ("C-c e r" . eglot-rename)
          ("C-c f d" . flymake-show-project-diagnostics)
          ("C-c f n" . flymake-goto-next-error)
          ("C-c f p" . flymake-goto-prev-error)
          ("C-c x a" . xref-find-apropos)
          ("C-c x f" . xref-find-definitions)
          ("C-c x r" . xref-find-references))

    :config
    ;; "Emacs by default caps the number of bytes read from a subprocess in a single chunk to 4KB.
    ;; However, modern machines can take on a lot more. Set it to 1MB which is equal to the limit
    ;; defined in /proc/sys/fs/pipe-max-size/."
    ;;
    ;; Refs:
    ;; https://grtcdr.tn/dotfiles/emacs/emacs.html#orgdb7d3a6 Ref:
    ;; https://github.com/jwiegley/dot-emacs/blob/2b4c57963413cb80e8716f014f25eaf4850c369c/init.org#eglot
    (setq read-process-output-max (* 1024 1024))

    :custom
    (eglot-autoshutdown t)
    (eglot-menu-string "eglot")
    (eglot-ignored-server-capabilities '(:documentHighlightProvider))
    )

  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '(python-ts-mode . ("~/.local/bin/ruff-lsp"))))

#+end_src
*** pyvenv-auto
#+begin_src emacs-lisp
  ;; ref: https://grtcdr.tn/dotfiles/emacs/emacs.html#orgdb7d3a6
  (use-package pyvenv-auto
    :custom
    (pyvenv-auto-mode t))
#+end_src
*** treesit-auto
[[https://github.com/renzmann/treesit-auto][GitHub - renzmann/treesit-auto: Automatic installation, usage, and fallback f...]]
#+begin_src emacs-lisp
  (use-package treesit-auto
    :config
    (global-treesit-auto-mode)
    (setq treesit-auto-install t)
    )
#+end_src
** envrc
[[https://github.com/purcell/envrc]]
#+begin_src emacs-lisp
  (use-package envrc
    :config
    (envrc-global-mode)
    )
#+end_src
** fonts
Interactive font scaling:
  - For all frames     -> M-x increase-font-size/decrease-font-size (C-+ and C-- respectively)
  - For current buffer -> M-x text-scale-adjust

 Which one is currently displayed?
   - M-x describe-font <cr> <cr>

 Set a new font interactively:
   - M-x set-frame-font (Pick from list!)

 History of fonts actually tried for more than one day!:
 - (defvar pb/var-fixedwidth-font "-*-DM Mono-normal-normal-normal-*-%d-*-*-*-m-0-iso10646-1")
 - (defvar pb/var-fixedwidth-font "-*-Astigmata-medium-normal-normal-*-%d-*-*-*-p-0-iso10646-1")
   
#+begin_src emacs-lisp

  (defvar pb/var-variablewidth-font "-*-Open Sans-normal-normal-normal-*-%d-*-*-*-p-0-iso10646-1")
  (defvar pb/var-fixedwidth-font    "-*-SauceCodePro Nerd Font Mono-light-normal-normal-*-%d-*-*-*-m-0-iso10646-1")

  ;; Tools for interactive use when moving between monitor and laptop displays without restarting
  ;; (and used below to auto-set font size on startup)
  (defun pb/font-size-monitor ()
    "Set font obo 4K monitor."
    (interactive)
    (set-frame-font (format pb/var-fixedwidth-font 22))
    )

  (defun pb/font-size-laptop ()
    "Set font obo laptop display."
    (interactive)
    (set-frame-font (format pb/var-fixedwidth-font 14))
    )

  (setq ns-use-thin-smoothing t)
  (if (and (display-graphic-p)
           (>= (x-display-pixel-width) 3840))
      (progn
        (pb/font-size-monitor)
        )
    (progn
      (when (and (display-graphic-p) (< (x-display-pixel-width) 3840))
        (pb/font-size-laptop)
        )
      )
    )
#+end_src
** format-all
Auto-format whole buffer, h/t: [[https://ianyepan.github.io/posts/format-all/][Ian YE Pan]]
#+begin_src emacs-lisp
  (use-package format-all
    :commands
    (format-all-mode format-all-region-or-buffer)

    :hook
    ((python-mode python-ts-mode) . (lambda ()
                                      (setq format-all-formatters '(("Python" ruff)))))
  
    :config
    (format-all-ensure-formatter)
  
    (setq-default format-all-formatters '(("Python" ruff)))
  
    (global-set-key (kbd "M-F") #'format-all-buffer)

    )
#+end_src
** gptel
https://github.com/karthink/gptel
 #+begin_src emacs-lisp
   (require 'auth-source)

   (defun pb/get-anthropic-api-key ()
     "Retrieve the API key for api.anthropic.com from .authinfo."
     (require 'auth-source)
     (let ((secret (plist-get (nth 0 (auth-source-search :host "api.anthropic.com"))
                              :secret)))
       (if secret
           secret
         (error "No API key found for api.anthropic.com in .authinfo"))))

   (use-package gptel
     :ensure t
     :init
     ;; (setq-default gptel-model "gpt-4")
     (setq gptel-api-key (pb/get-anthropic-api-key))
     (setq
      gptel-backend (gptel-make-anthropic "Claude" :stream t :key gptel-api-key)
      gptel-model "claude-3-opus-20240229" ;  "claude-3-sonnet-20240229" also available
      )
     )
 #+end_src
** graphviz-dot-mode
#+begin_src emacs-lisp
  (use-package graphviz-dot-mode
    :config
    (setq graphviz-dot-indent-width 4))
#+end_src
** helpful
Improve quality of most-used C-h methods.
#+begin_src emacs-lisp
  (use-package helpful
    :demand t

    :bind
    ("C-x C-g" . magit-status)

    ;; Note that the built-in `describe-function' includes both functions
    ;; and macros. `helpful-function' is functions only, so we provide
    ;; `helpful-callable' as a drop-in replacement.
    ("C-h f" . helpful-callable)
    ("C-h v" . helpful-variable)
    ("C-h k" . helpful-key)
    ("C-h x" . helpful-command)

    ;; I also recommend the following keybindings to get the most out of helpful:
    ;; Lookup the current symbol at point. C-c C-d is a common keybinding
    ;; for this in lisp modes.
    ("C-c C-d" . helpful-at-point)

    ;; Look up *F*unctions (excludes macros).
    ;;
    ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
    ;; already links to the manual, if a function is referenced there.
    ("C-h F"  . helpful-function)
    )

#+end_src
** hungry-deletes
Aggressively (but reluctantly) delete white-space.
[[https://github.com/hrehfeld/emacs-smart-hungry-delete]]
#+begin_src emacs-lisp
  (use-package smart-hungry-delete
    :ensure t
    :bind (([remap delete-char]                   . smart-hungry-delete-forward-char)
           ([remap org-delete-char]               . smart-hungry-delete-forward-char)
           ([remap backward-delete-char-untabify] . smart-hungry-delete-backward-char)
           ([remap delete-backward-char]          . smart-hungry-delete-backward-char))
    :init (smart-hungry-delete-add-default-hooks))
#+end_src
** full-frame
Use a single-window (part. for Magit) and then close.
#+begin_src emacs-lisp
  (use-package fullframe
    :config (fullframe magit-status magit-mode-quit-window))
#+end_src
** justfile
#+begin_src emacs-lisp
  (use-package just-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\justfile?\\'" . just-mode))
    )
#+end_src
** magit & git
*** magit
#+begin_src emacs-lisp
  (use-package magit
    :demand t

    :bind
    ("C-x C-g" . magit-status)

    :config
    (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))

  (use-package ibuffer-git)

  (use-package magit-todos
    :after magit

    :config
    (setq magit-show-long-lines-warning nil)
    (magit-todos-mode 1)

    :load-path "~/.emacs.d/site-lisp/magit-todos/"
    )

  ;; Full screen magit-status
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))

  (defun magit-quit-session ()
    "Restores the previous window configuration and kills the magit buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen))


#+end_src
*** magit-todos
#+begin_src emacs-lisp
  (use-package magit-todos
	:after magit
	:config (magit-todos-mode 1)
	:load-path "~/.emacs.d/site-lisp/magit-todos/"
	)
#+end_src
*** git-timemachine
 #+begin_src emacs-lisp
   (use-package git-timemachine)
 #+end_src
*** git-gutter
 #+begin_src emacs-lisp
   (use-package git-gutter
     :init
     (global-git-gutter-mode +1)

     :config
     (setq git-gutter:disabled-modes '(org-mode image-mode))

     )
 #+end_src
*** ibuffer-git
#+begin_src emacs-lisp
  (use-package ibuffer-git)
#+end_src
** markdown
Specifically, GithubFlavoredMarkdown-mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("*\\.md\\'" . gfm-mode)

    :init
    (setq
     markdown-command      "multimarkdown"
     markdown-open-command "/usr/local/bin/mark") ;; Opens application -> Marked2

    :config
    (add-hook 'markdown-mode-hook 'visual-line-mode)
    (add-hook 'markdown-mode-hook 'pb/markdown-config)
    ;;(add-hook 'markdown-mode-hook 'pb/variable-width-face-mode)
    )

  (defun pb/markdown-config ()
    (local-set-key (kbd "M-q") 'ignore))
#+end_src
** mood-line [mode-line]
Nice and simple: https://github.com/jessiehildebrandt/mood-line
#+begin_src emacs-lisp
  (use-package mood-line
	:ensure t

	:init
	(custom-set-faces
	 '(mode-line-active   ((t (:family "SauceCodePro Nerd Font Mono" :height 1.0))))
	 '(mode-line-inactive ((t (:family "SauceCodePro Nerd Font Mono" :height 0.7))))
	 )
	(mood-line-mode)
	)
#+end_src
** nerd-icons-ibuffer
Displays nerd-icons for iBuffer types...yes, somewhat indulgent but I'm worth it ;-)
#+begin_src emacs-lisp
  (use-package nerd-icons-ibuffer
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src
** olivetti
https://github.com/rnkn/olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :init
    (setq olivetti-body-width 0.66)

    :hook
    ((markdown-mode . olivetti-mode))
    )
#+end_src
** org
*** org
#+begin_src emacs-lisp
  ;; -----------------------------------------------------------------------------
  ;; Packages
  ;; -----------------------------------------------------------------------------
  (use-package org
    :ensure nil

    :defer nil

    :bind (:map org-mode-map
                ("C-M-<return>" . org-insert-subheading)
                ("C-c l"        . org-store-link)
                ("C-c L"        . org-cliplink)
                ("C-c a"        . org-agenda)
                ("C-c |"        . org-table-create-or-convert-from-region)
                ("C-c C-<"      . org-promote-subtree)
                ("C-c C->"      . org-demote-subtree)
                ("C-<right>"    . org-metaright)
                ("C-<left>"     . org-metaleft)
                )

    :config
    (add-hook 'text-mode-hook #'visual-line-mode)
    (visual-line-mode 1)

    ;; https://sachachua.com/blog/2024/01/org-mode-custom-link-copy-to-clipboard/
    (org-link-set-parameters
     "copy"
     :follow (lambda (link) (kill-new link))
     :export (lambda (_ desc &rest _) desc))

    :init
    (setq fill-column               96 ;; Org won't use the global fill-column, set here explicitly?
          org-catch-invisible-edits 'show-and-error
          org-ellipsis              "…" ;; ▼ …, ↴ ⤵, ▼, ↴, ⬎, ⤷, ⋱
          org-hide-leading-stars    t
          org-return-follows-link   t
          org-startup-folded        t
          org-startup-indented      t
          )
    )

  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

  ;; Allow for links like [[file:~/dev/foo][Code]] to open a dired on C-c C-o.
  ;; https://emacs.stackexchange.com/questions/10426/org-mode-link-to-open-directory-in-dired
  (add-to-list 'org-file-apps '(directory . emacs))

  ;; ---------------------------------------------------------------------------
  ;; GTD Configuration
  ;; ---------------------------------------------------------------------------
  ;; Keywords: this sequence is on behalf of regular TO-DO items in my GTD world.
  (setq org-todo-keywords '((sequence
                             "TODO(t)"
                             "WAIT(a)"
                             "HOLD(h)"
                             "WORK(w)"
                             "|"
                             "DONE(x)"
                             )))

  (setq org-todo-keyword-faces
        '(("TODO" . "systemOrangeColor") ;; used to be org-warning aka "#fb4933".
          ("WORK" . "light green")
          ("HOLD" . "systemBrownColor")
          ("WAIT" . "systemBrownColor")
          ("DONE" . "gray30")
          ))

  ;; Format of TODO items (defined like this so the entire headline is NOT colored across, just the TODO keyword.)
  (setq org-fontify-todo-headline nil)

  ;; Format of DONE items (defined like this so the entire headline is colored across, not just the DONE keyword.)
  (setq org-fontify-done-headline t)
  (set-face-attribute 'org-done          nil :foreground "gray30" :strike-through nil)
  (set-face-attribute 'org-priority      nil :foreground "gray30" :strike-through nil)
  (set-face-attribute 'org-headline-done nil :foreground "gray30" :strike-through nil)

  ;; ---------------------------------------------------------------------------
  ;; Capture templates
  ;; ---------------------------------------------------------------------------
  (define-key global-map (kbd "C-c c") 'org-capture)
  (setq org-capture-templates
        '(
          ("t" "GTD"      entry (file+headline "/Users/peter/Repository/00-09 System/01 Org/gtd.org" "INBOX") "** TODO %?\n\n")
          ("p" "Projects" entry (file          "/Users/peter/Repository/00-09 System/01 Org/projects.org"   ) "* TODO %?\n\n" :prepend t)
          ("j" "Journal"  entry (file+datetree "/Users/peter/Repository/00-09 System/01 Org/journal.org"    ) "*** %?")
          ))

  ;; Insert date-time stamp like org but everywhere.
  (global-set-key (kbd "C-c .") 'org-time-stamp)
  
#+end_src
*** babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (js         . t)
     (python     . t)
     (shell      . t)
     (sqlite     . t)
     ))
  (setq org-confirm-babel-evaluate nil)
#+end_src
*** org-modern-indent
 #+begin_src emacs-lisp
   ;; (use-package org-modern-indent
   ;;   :load-path "~/.emacs.d/site-lisp/org-modern-indent"
   ;;   :config
   ;;   (add-hook 'org-mode-hook #'org-modern-indent-mode 128))
 #+end_src
*** org-appear
 #+begin_src emacs-lisp
   (use-package org-appear
       :hook (org-mode . org-appear-mode))
 #+end_src
*** org-cliplink
Create an org-link from a URL in the clipboard with the actual title of the URL as the link title.
 #+begin_src emacs-lisp
   (use-package org-cliplink
     :after 'org)
 #+end_src
*** org-superstar
Nice(r) bullets (replaces org-bullets)
 #+begin_src emacs-lisp
   (use-package org-superstar
     :config
     (setq org-superstar-special-todo-items t) ;; Set our TODO items to have a 'checkbox' icon
     (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

   (setq org-superstar-item-bullet-alist
         '((?* . ?•)
           (?+ . ?➤)
           (?- . ?•)))
 #+end_src
** pbcopy
Allow interaction with MacOS clipboard and kill/yank ring in emacs.
#+begin_src emacs-lisp
  (use-package pbcopy)
#+end_src
** pdf
#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
    )
  (pdf-tools-install)
#+end_src
** postgresql
#+begin_src emacs-lisp
  (setq sql-postgres-program "/Applications/Postgres.app/Contents/Versions/latest/bin/psql")
  (add-hook 'sql-mode-hook 'sql-highlight-postgres-keywords)
  (add-hook 'sql-interactive-mode-hook 'sql-rename-buffer)

  ; Execute this after opening up SQL to get a scratch
  ; buffer from which to submit sql with C-c C-b
  (defun pgsql-scratch ()
    (interactive)
    (switch-to-buffer "*scratch*")
    (sql-mode)
    (sql-set-product "postgres")
    (sql-set-sqli-buffer)
    (sql-rename-buffer)
    )

  (defun upcase-sql-keywords ()
    (interactive)
    (save-excursion
      (dolist (keywords sql-mode-postgres-font-lock-keywords)
        (goto-char (point-min))
        (while (re-search-forward (car keywords) nil t)
          (goto-char (+ 1 (match-beginning 0)))
          (when (eql font-lock-keyword-face (face-at-point))
            (backward-char)
            (upcase-word 1)
            (forward-char))))))

  (setq sql-connection-alist
      '(
        (foo
        (sql-product 'postgres)
        (sql-port 5432)
        (sql-server "localhost")
        (sql-user "--sorry, getme from environment--")
        (sql-password "--sorry, getme from environment also--")
        (sql-database "db-foo"))
       )
      )

  (defun wrapper-sql-connect (product connection)
    (setq sql-product product)
    (sql-connect connection))

  ; Startup wrappers
  (defun sql-environment-foo ()
    (interactive)
    (wrapper-sql-connect 'postgres 'foo))
#+end_src
** pulsar
[[https://protesilaos.com/emacs/pulsar]]
#+begin_src emacs-lisp
  (use-package pulsar
    :load-path "~/.emacs.d/site-lisp/pulsar/"

    :config
    (setq pulsar-delay  0.10
          pulsar-face  'pulsar-yellow
          pulsar-pulse nil)

    (dolist (hook '(org-mode-hook python-mode-hook yaml-mode-hook text-mode-hook emacs-lisp-mode-hook dired-mode-hook web-mode-hook))
      (add-hook hook #'pulsar-mode))

    (add-hook 'next-error-hook #'pulsar-pulse-line)

    ;; Don't use global mode as it looks ugly trying to pulse my complex vterm fish prompt ;-(
    ;; (pulsar-global-mode 1)
    )
#+end_src
** rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                        :foreground 'unspecified
                        :inherit 'error)
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

  (use-package prog-mode
    :ensure nil
    :hook ((prog-mode . rainbow-delimiters-mode)))
 #+end_src
** rainbow-mode
   Display colour codes in the actual colour they represent, e.g. #0000ff (should be white text on a blue background)
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :demand t
    :hook (prog-mode)
    )
#+end_src
** rg (aka ripgrep)
Use wgrep-save-all-buffers to save once changes have been committed after editing rg results buffer.
#+begin_src emacs-lisp
    (use-package rg
      :config
      (rg-enable-menu))

    ;; Separate these into 2 cases:
    ;; This one only works on selected text BUT doesn't prompt for directory or file type!
    (global-set-key (kbd   "<f5>") 'rg-project)

    ;; While this one prompts for something to query on but also asks for directory and type as well..
    (global-set-key (kbd "C-<f5>") 'rg-literal)
#+end_src
** saveplace
#+begin_src emacs-lisp
  (use-package saveplace
    :config
    (setq-default save-place t)

    :init
    (save-place-mode 1)
    )
#+end_src
** shell
#+begin_src emacs-lisp
  (setq explicit-shell-file-name "/usr/local/bin/fish")
  (setq shell-pushd-regexp "push[d]*")
  (setq shell-popd-regexp   "pop[d]*")

  ;; Make git work within shell
  (setenv "PAGER"  "/bin/cat")
  (setenv "EDITOR" "/Applications/Emacs.app/Contents/MacOS/bin/emacsclient")
#+end_src
** super-save
[[https://github.com/bbatsov/super-save][GitHub - bbatsov/super-save: Save Emacs buffers when they lose focus]]:
Best description is from package site itself: "super-save auto-saves
your buffers, when certain events happen - e.g. you switch between
buffers, an Emacs frame loses focus, etc. You can think of it as both
something that augments and replaces the standard auto-save-mode."
#+begin_src emacs-lisp
  (use-package super-save
    :ensure t
    :config
    (super-save-mode 1)
    )
#+end_src
** text-mode
#+begin_src emacs-lisp
  (setq text-mode-hook
        '(lambda ()
           (auto-fill-mode 0)
           (setq tab-width 4)
           ))
  (setq default-major-mode 'text-mode)
#+end_src
** theme (gruvbox)
#+begin_src emacs-lisp
    (use-package gruvbox-theme
      :ensure t
      :config
      (load-theme 'gruvbox-dark-hard t)
      (custom-set-faces
       '(org-level-1 ((t (:height 1.15))))
       '(org-level-2 ((t (:height 1.10))))
       '(org-level-3 ((t (:height 1.05))))
       '(org-document-title ((t (:height 1.5 :underline nil))))))

    ;; Override the face obo documentation..
  (custom-set-faces
   '(font-lock-doc-face     ((t (:foreground "#666666" :height 0.9))))
   '(font-lock-comment-face ((t (:foreground "#666666" :height 0.9))))
  )
#+end_src
** toml-mode
#+begin_src emacs-lisp
  (use-package toml-mode
    :defer t)
#+end_src
** tree-sitter
- As of <2023-08-14 Mon> Working 29.1! (from https://github.com/railwaycat/homebrew-emacsmacport)
  (with some help from [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][How to Get Started with Tree-Sitter - Mastering Emacs]])
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
        '(
          (bash       "https://github.com/tree-sitter/tree-sitter-bash")
          (cmake      "https://github.com/uyha/tree-sitter-cmake")
          (css        "https://github.com/tree-sitter/tree-sitter-css")
          (html       "https://github.com/tree-sitter/tree-sitter-html")
          (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
          (json       "https://github.com/tree-sitter/tree-sitter-json")
          (make       "https://github.com/alemuller/tree-sitter-make")
          (markdown   "https://github.com/ikatyang/tree-sitter-markdown")
          (python     "https://github.com/tree-sitter/tree-sitter-python")
          (toml       "https://github.com/tree-sitter/tree-sitter-toml")
          (yaml       "https://github.com/ikatyang/tree-sitter-yaml"))
        )

  (use-package treesit-auto
    :demand t

    :config
    (global-treesit-auto-mode)

    )
#+end_src
** unfill
https://github.com/purcell/unfill
 #+begin_src emacs-lisp
   (use-package unfill
     :bind (("M-Q" . unfill-paragraph)))
#+end_src
** vertico (and orderless)
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t

    :init
    (vertico-mode)
    (setq vertico-cycle         t ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
          vertico-scroll-margin 0
          vertico-count         15)
    )

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setq read-extended-command-predicate #'command-completion-default-include-p)

  ;; Taken directly from vertico docs:
  (use-package orderless  ;; Optionally use the `orderless' completion style.
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** volatile-highlights
 #+begin_src emacs-lisp
   (use-package volatile-highlights
     :custom
     (volatile-highlights-mode t)
     )
#+end_src
** vterm
"C-c C-t" to go into "buffer" mode (for copy/paste operations)
 #+begin_src emacs-lisp

   (use-package vterm
     :ensure t
     :defer t

     :config
     (setq vterm-shell "/usr/local/bin/fish")

     :hook
     ((vterm-mode . (lambda () (setq-local show-trailing-whitespace nil)))
      (vterm-mode . vterm-custom-font-size))

     :custom
     (vterm-always-compile-module t))

   (defun vterm-custom-font-size()
     (setq buffer-face-mode-face '(:weight light :height 180))
     (buffer-face-mode))

   (defun pb/vterm-current-directory ()
     "Create a terminal buffer from the current dired location"
     (interactive)
     (let ((shell-name (car (last (butlast (split-string default-directory "/"))))))
       (vterm (concat "@" shell-name))
       )
     )

   (defun pb/vterm-by-name ()
     "Create a terminal buffer based on name provided."
     (interactive)
     (let ((shell-name (read-string "Shell name: ")))
       (vterm (concat "@" shell-name))
       )
     )

   (global-set-key (kbd   "<f12>") 'pb/vterm-current-directory)
   (global-set-key (kbd "C-<f12>") 'pb/vterm-by-name)
#+end_src
** web/mmm-mode
#+begin_src emacs-lisp
  (use-package mmm-mode
	:ensure t
	:config
	(setq mmm-global-mode 'auto)

	(use-package mmm-jinja2
	  :load-path "~/.emacs.d/site-lisp/mmm-jinja2/"
	  :init
	  (setq mmm-global-mode 'maybe
		mmm-parse-when-idle 't)

	  )

	(use-package web-mode
	  :config
	  (setq web-mode-engines-alist '(("django" . "\\.html$"))
		web-mode-engines-alist '(("django" . "\\.htmx$")))
	  )

	:config
	(add-to-list 'auto-mode-alist '("\\.html$"     . web-mode))
	(add-to-list 'auto-mode-alist '("\\.htmx$"     . web-mode))
	(add-to-list 'auto-mode-alist '("\\.dhtml$"    . web-mode))
	(add-to-list 'auto-mode-alist '("\\.jinja2\\'" . html-mode))

	(mmm-add-mode-ext-class 'web-mode  "\\.html?\\'"  'jinja2)
	(mmm-add-mode-ext-class 'html-mode "\\.jinja2\\'" 'jinja2)
	)

  ;; Copy what we did for IRIS at ES, ie, have HTML indenting match Python:
  (defun pb-web-mode-hook ()
	(setq web-mode-markup-indent-offset 2)
	(setq web-mode-css-indent-offset    2)
	(setq web-mode-code-indent-offset   2)
	(setq web-mode-indent-style         2)
	)
  (add-hook 'web-mode-hook 'pb-web-mode-hook)
#+end_src
** ws-butler
#+begin_src emacs-lisp
  (use-package ws-butler
    :config
    (ws-butler-global-mode 1)
  )
#+end_src
** yaml-mode
#+begin_src emacs-lisp
  (use-package yaml-pro
     :defer t
     :hook
     (yaml-mode . yaml-pro-ts-mode))
#+end_src
** yasnippet
While the majority of the time, I don't rely on snippets, there are a
very select /few/ that I consider worthwhile, thus, keep use of
yasnippets for now (but make sure they don't expand within comments!)
#+begin_src emacs-lisp
  ;; Don't do snippet expansion within comments/docstrings for py:
  ;; (https://stackoverflow.com/questions/25521897/how-to-never-expand-yasnippets-in-comments-and-strings)
  (defun pb/yas-no-expand-in-comment_string ()
    (setq yas-buffer-local-condition
          '(if (nth 8 (syntax-ppss)) ;; non-nil if in a string or comment
               '(require-snippet-condition . force-in-comment)
             t)))

  (use-package yasnippet
      :config

      ;; Bind `SPC' to `yas-expand' when snippet expansion available (it will still call `self-insert-command' otherwise)
      (define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand)

      ;; Use the method above to keep snippets only when we're writing actual code.
      ;; (add-hook 'prog-mode-hook 'yas-no-expand-in-comment/string)

      (add-hook 'python-ts-mode-hook   #'yas-minor-mode)
      (add-hook 'python-base-mode-hook #'yas-minor-mode)
      (add-hook 'prog-mode-hook        #'pb/yas-no-expand-in-comment_string)

      (yas-global-mode 1)
      (yas-reload-all)
      )
#+end_src
** zoom
[[https://github.com/cyrus-and/zoom][GitHub - cyrus-and/zoom: Fixed and automatic balanced window layout for Emacs]]
#+begin_src emacs-lisp
  (use-package zoom
      :config
      (zoom-mode 1)
      )
#+end_src
** zygospore
Toggles between "current" buffer to fullscreen and existing buffer layout (and back again)
#+begin_src emacs-lisp
  (use-package zygospore
    :load-path "~/.emacs.d/site-lisp/zygospore.el/"
    )
  (global-set-key (kbd "C-x 1") 'zygospore-toggle-delete-other-windows)

#+end_src
** COMMENT ARCHIVED
*** editorconfig
"EditorConfig helps maintain consistent coding styles for multiple developers working on the same project across various editors and IDEs."
However, I don't work with "multiple developers" much anymore, not necessary!
[[https://editorconfig.org/][EditorConfig]]
#+begin_src emacs-lisp
  (use-package editorconfig
    :init
    (editorconfig-mode 1)
    )
#+end_src
*** elm-mode
On hiatus until/if I get back to doing elm development
https://github.com/jcollard/elm-mode
#+begin_src emacs-lisp
  (use-package elm-mode
    :config
    (setq elm-format-on-save t)

    :init
    (add-hook 'elm-mode-hook 'elm-format-on-save-mode)
    )
#+end_src
*** find-file-in-project
~project-find-file~ works fine, no need to ffip for me.
*** lin
[[https://elpa.gnu.org/packages/lin.html][GNU ELPA - lin]] (Prot)
#+begin_src emacs-lisp
  (use-package lin
    :ensure t
    :config
    (lin-global-mode 1)
    )
#+end_src
*** mode-lines
Tried and discarded for one reason or another.
**** COMMENT telephone-line
**** COMMENT [[https://github.com/TheBB/spaceline][spaceline]]
[[https://github.com/TheBB/spaceline#turning-segments-on-and-off][GitHub - TheBB/spaceline: Powerline theme from Spacemacs]]
#+begin_src emacs-lisp
  (use-package spaceline
    :disabled
    :init
    (spaceline-emacs-theme)
    :config
    (spaceline-toggle-minor-modes-off)
    )
#+end_src
**** COMMENT [[https://github.com/Malabarba/smart-mode-line/][smart-mode-line]]
#+begin_src emacs-lisp
  (use-package smart-mode-line
    :disabled
    :ensure t
    :init
    (sml/setup)
    )
#+end_src
**** COMMENT [[https://github.com/seagle0128/doom-modeline?tab=readme-ov-file#customize][doom]]
[[https://github.com/seagle0128/doom-modeline][GitHub - seagle0128/doom-modeline: A fancy and fast mode-line inspired by min...]]
http://emacs.stackexchange.com/questions/13227/easy-way-to-give-the-time-its-own-face-in-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :disabled
    :ensure t

    :init
    (setq
     display-time-string-forms '((propertize (format-time-string "%a %R %F" now)))
     doom-modeline-column-zero-based nil
     doom-modeline-height 1

     doom-modeline-position-column-format '("C%c")
     doom-modeline-position-column-line-format '("%l - %c")
     doom-modeline-position-line-format '("L%l")
     doom-modeline-vcs-max-length 20

     modeline-position-column-format '("C%c")
     modeline-position-column-line-format '("%l - %c")
     modeline-position-line-format '("L%l")

     inhibit-compacting-font-caches t
     nerd-icons-scale-factor 1.0
     )
    (custom-set-faces
     '(mode-line-active   ((t (:family "SauceCodePro Nerd Font Mono" :height 1.0))))
     '(mode-line-inactive ((t (:family "SauceCodePro Nerd Font Mono" :height 0.8))))
     )

    :hook
    (after-init . doom-modeline-mode)
    )
#+end_src
*** move-text
#+begin_src emacs-lisp
  (use-package move-text
    :init
    (move-text-default-bindings)
    )
#+end_src
*** outli
Never could get this to work :-(
#+begin_src emacs-lisp
  (use-package outli
    :load-path "~/.emacs.d/site-lisp/outli"
    :bind (:map outli-mode-map ; convenience key to get back to containing heading
                ("C-c C-p" . (lambda () (interactive) (outline-back-to-heading))))
    :custom (outli-heading-config '((python-mode     "## " ?* nil nil)
                                    (emacs-lisp-mode ";; " ?* nil nil)
                                    ))
    :hook ((prog-mode python-mode text-mode) . outli-mode)) ; or whichever modes you prefer
#+end_src
*** page-break-lines
[[https://github.com/purcell/page-break-lines][Display a nice line for ^L's.]]
#+begin_src emacs-lisp
  (use-package page-break-lines
    :init (global-page-break-lines-mode))
#+end_src
*** python (pet)
As of now, not sure when this would be necessary, everything *I* need to do works!
[[https://github.com/wyuenho/emacs-pet][GitHub - wyuenho/emacs-pet: Tracks down the correct Python tooling executable...]]
*** substitute
https://protesilaos.com/emacs/substitute
#+begin_src emacs-lisp
  (use-package substitute
        :config
        (require 'substitute)
        (add-hook 'substitute-post-replace-functions #'substitute-report-operation)

        :bind (("M-<f6>" . substitute-target-in-buffer))
        )
#+end_src
*** theme: modus-operandi
#+begin_src emacs-lisp
  (use-package modus-themes
    :ensure t
    :config
    ;;
    ;; Use Prot's own configuration:
    ;; https://protesilaos.com/emacs/modus-themes#h:aabcada6-810d-4eee-b34a-d2a9c301824d
    ;;
    (setq modus-themes-custom-auto-reload nil
          modus-themes-to-toggle '(modus-operandi modus-vivendi)
          modus-themes-mixed-fonts t
          modus-themes-variable-pitch-ui nil
          modus-themes-italic-constructs t
          modus-themes-bold-constructs t
          modus-themes-org-blocks 'gray-background
          modus-themes-completions '((t . (extrabold)))
          modus-themes-prompts nil
          )

    (setq modus-themes-common-palette-overrides
          '((cursor magenta-cooler)

            ;; Make the fringe invisible.
            (fringe unspecified)

            ;; Make line numbers less intense and add a shade of cyan
            ;; for the current line number.
            (fg-line-number-inactive "gray50")
            (fg-line-number-active cyan-cooler)
            (bg-line-number-inactive unspecified)
            (bg-line-number-active unspecified)

            ;; Make the current line of `hl-line-mode' a fine shade of
            ;; gray (though also see my `lin' package).
            (bg-hl-line bg-dim)

            ;; Make the region have a cyan-green background with no
            ;; specific foreground (use foreground of underlying text).
            ;; "bg-sage" refers to Salvia officinalis, else the common
            ;; sage.
            (bg-region bg-sage)
            (fg-region unspecified)

            ;; Make matching parentheses a shade of magenta.  It
            ;; complements the region nicely.
            (bg-paren-match bg-magenta-intense)

            ;; Make email citations faint and neutral, reducing the
            ;; default four colors to two; make mail headers cyan-blue.
            (mail-cite-0 fg-dim)
            (mail-cite-1 blue-faint)
            (mail-cite-2 fg-dim)
            (mail-cite-3 blue-faint)
            (mail-part cyan-warmer)
            (mail-recipient blue-warmer)
            (mail-subject magenta-cooler)
            (mail-other cyan-warmer)

            ;; Change dates to a set of more subtle combinations.
            (date-deadline magenta-cooler)
            (date-scheduled magenta)
            (date-weekday fg-main)
            (date-event fg-dim)
            (date-now blue-faint)

            ;; Make tags (Org) less colorful and tables look the same as
            ;; the default foreground.
            (prose-done cyan-cooler)
            (prose-tag fg-dim)
            (prose-table fg-main)

            ;; Make headings less colorful (though I never use deeply
            ;; nested headings).
            (fg-heading-2 blue-faint)
            (fg-heading-3 magenta-faint)
            (fg-heading-4 blue-faint)
            (fg-heading-5 magenta-faint)
            (fg-heading-6 blue-faint)
            (fg-heading-7 magenta-faint)
            (fg-heading-8 blue-faint)

            ;; Make the active mode line a fine shade of lavender
            ;; (purple) and tone down the gray of the inactive mode
            ;; lines.
            (bg-mode-line-active bg-lavender)
            (border-mode-line-active bg-lavender)
            (bg-mode-line-inactive bg-dim)
            (border-mode-line-inactive bg-inactive)

            ;; Make the prompts a shade of magenta, to fit in nicely with
            ;; the overall blue-cyan-purple style of the other overrides.
            ;; Add a nuanced background as well.
            (bg-prompt bg-magenta-nuanced)
            (fg-prompt magenta-cooler)

            ;; Tweak some more constructs for stylistic constistency.
            (name blue-warmer)
            (identifier magenta-faint)
            (keybind magenta-cooler)
            (accent-0 magenta-cooler)
            (accent-1 cyan-cooler)
            (accent-2 blue-warmer)
            (accent-3 red-cooler)
            )
          )

    ;; Make the active mode line have a pseudo 3D effect (this assumes
    ;; you are using the default mode line and not an extra package).
    (custom-set-faces
     '(mode-line ((t :box (:style released-button)))))

    (load-theme 'modus-operandi)
    )
#+end_src
*** theme: monokai
#+begin_src emacs-lisp
  (use-package monokai
    :ensure nil
    :config
    (setq monokai-height-plus-4 1.2
          monokai-height-plus-3 1.1
     )
    (load-theme 'monokai nil)
  )
#+end_src
*** theme: [[https://protesilaos.com/emacs/ef-themes][ef-autumn]] (prot)
#+begin_src emacs-lisp
  (use-package ef-themes
    :ensure nil
    :config
    (setq ef-themes-italic-constructs t
          ef-themes-bold-constructs nil)
    (setq ef-themes-headings
          '((0 . (0.8))			;; Document titles etc.
            (1 . (1.2))
            (2 . (1.1))))
    (setq ef-themes-common-palette-overrides
          '((fg-heading-1 blue)
            (fg-heading-2 cyan)
            (fg-heading-3 green)))
    (load-theme 'ef-autumn)
  )
#+end_src
* Custom Commands
  These are custom commands I used on regular basis (almost all of
  which are cribbed from others, credit given as much as possible!).
  Listed in no particular order:
** Change case of text
[[http://ergoemacs.org/emacs/modernization_upcase-word.html]]
#+begin_src emacs-lisp
  (defun pb/toggle-letter-case ()
    "Toggle the letter case of current word or text selection, toggles between: “all lower”, “Init Caps”, “ALL CAPS”."
    (interactive)
    (let (p1 p2 (deactivate-mark nil) (case-fold-search nil))
      (if (region-active-p)
          (setq p1 (region-beginning) p2 (region-end))
        (let ((bds (bounds-of-thing-at-point 'word) ) )
          (setq p1 (car bds) p2 (cdr bds)) ) )

      (when (not (eq last-command this-command))
        (save-excursion
          (goto-char p1)
          (cond
           ((looking-at "[[:lower:]][[:lower:]]") (put this-command 'state "all lower"))
           ((looking-at "[[:upper:]][[:upper:]]") (put this-command 'state "all caps") )
           ((looking-at "[[:upper:]][[:lower:]]") (put this-command 'state "init caps") )
           ((looking-at "[[:lower:]]") (put this-command 'state "all lower"))
           ((looking-at "[[:upper:]]") (put this-command 'state "all caps") )
           (t (put this-command 'state "all lower") ) ) )
        )

      (cond
       ((string= "all lower" (get this-command 'state))
        (upcase-initials-region p1 p2) (put this-command 'state "init caps"))
       ((string= "init caps" (get this-command 'state))
        (upcase-region p1 p2) (put this-command 'state "all caps"))
       ((string= "all caps" (get this-command 'state))
        (downcase-region p1 p2) (put this-command 'state "all lower")) )
      )
    )

  ;; Turn these off so they don't interfere with our custom method
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region   'disabled nil)

  (global-set-key (kbd "M-l") 'pb/toggle-letter-case) ;; Overrides existing mapping
#+end_src
** Ctrl-a behaviour enhancement
Ctrl-a goes to *logical beginning* of line first before a second invocation takes point to *physical* beginning.
#+begin_src emacs-lisp
  (defun pb/key-back-to-indentation-or-beginning ()
    (interactive)
    (if (= (point) (progn (back-to-indentation) (point)))
        (beginning-of-line)))
  (global-set-key (kbd "C-a") 'pb/key-back-to-indentation-or-beginning)
#+end_src
** Smarter C-w (backward word kill)
[[https://github.com/magnars/.emacs.d/blob/master/defuns/editing-defuns.el]]
#+begin_src emacs-lisp
  ;; Here's a better C-w (kill region if active, otherwise kill backward word)
  (defun pb/kill-region-or-backward-word ()
    (interactive)
    (if (region-active-p)
        (kill-region (region-beginning) (region-end))
      (backward-kill-word 1)))
  (global-set-key (kbd "C-w") (lambda () (interactive) (pb/kill-region-or-backward-word)))
#+end_src
** Better mark-word
[[https://www.emacs.dyerdwelling.family/emacs/20231209092556-emacs--redefining-mark-paragraph-and-mark-word/]]
#+begin_src emacs-lisp
  (defun pb/mark-word()
    "redefinition of mark-word"
    (interactive)
    (if (not (looking-at "\\<"))
      (backward-word))
    (push-mark)
    (forward-word)
    (setq mark-active t))

  ;; Override existing keymapping
  (global-set-key (kbd "M-@") 'pb/mark-word)
#+end_src
** Toggle window split
https://macowners.club/posts/custom-functions-5-navigation/
#+begin_src emacs-lisp
  (defun pb/toggle-split-direction ()
    "Toggle window split from vertical to horizontal or vice-versa.
     Credit: https://github.com/olivertaylor/dotfiles/blob/master/emacs/init.el"
    (interactive)
    (if (> (length (window-list)) 2)
        (error "Sorry, can only toggle split direction with 2 windows.")
      (let ((was-full-height (window-full-height-p)))
        (delete-other-windows)
        (if was-full-height
            (split-window-vertically)
          (split-window-horizontally))
        (save-selected-window
          (other-window 1)
          (switch-to-buffer (other-buffer)))))
    )
  
  (global-set-key (kbd "C-x O") 'pb/toggle-split-direction)
#+end_src
** Kill this buffer
[[http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/]]
#+begin_src emacs-lisp
  ;; Kill *this* buffer
  (defun pb/-kill-this-buffer- ()
    "Kill the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'pb/-kill-this-buffer-)
#+end_src
** Use project-file-find instead of file-find:
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-f")   (lambda () (interactive) (project-find-file)))
  (global-set-key (kbd "C-M-x C-f") (lambda () (interactive) (find-file)))
#+end_src
** Scroll page without moving cursor
#+begin_src emacs-lisp
  (global-set-key "\M-n" (lambda () (interactive) (scroll-up 12)))
  (global-set-key "\M-p" (lambda () (interactive) (scroll-down 12)))
#+end_src
** Smarter open line
 [[http://emacsredux.com/blog/2013/03/26/smarter-open-line/]]
#+begin_src emacs-lisp
  (defun pb/key-smart-open-line ()
    "Insert an empty line after the current line. Position the cursor at its beginning, according to the current mode."
    (interactive)
    (move-end-of-line nil)
    (newline-and-indent))

  (defun pb/key-smart-open-line-above ()
    "Insert an empty line above the current line. Position the cursor at it's beginning, according to the current mode."
    (interactive)

    (move-beginning-of-line nil)
    (newline-and-indent)
    (forward-line -1)
    (indent-according-to-mode))

  (global-set-key (kbd "M-o") 'pb/key-smart-open-line)
  (global-set-key (kbd "M-O") 'pb/key-smart-open-line-above)
#+end_src
** Split current frame into evenly balanced "3"
#+begin_src emacs-lisp
  (fset 'pb/split3 (kmacro-lambda-form [?\C-x ?1 ?\C-x ?3 ?\C-x ?3 ?\C-x ?+] 0 "%d"))
#+end_src
** Text/Font scaling interactively
[[https://www.reddit.com/r/emacs/comments/ck4k2u/forgot_my_glasses/?utm_source=share&utm_medium=ios_app]]
#+begin_src emacs-lisp
  (defun set-font-everywhere (font-spec &optional all-frames)
    (when (null (assq 'font default-frame-alist))
      (add-to-list 'default-frame-alist '(font . "")))

    (setcdr (assq 'font default-frame-alist) font-spec)

    (dolist (f (if all-frames (frame-list) (list (selected-frame))))
      (with-selected-frame f (set-frame-font font-spec t))))

  (defun resize-font(font &optional n)
    (let* ((ff (split-string font "-"))
           (size (nth 7 ff))
           (sizen (string-to-number size))
           (n (or n 1))
           (new-size (max 1 (+ n sizen))))
      (setcar (nthcdr 7 ff) (number-to-string new-size))
      (cons (mapconcat 'identity ff "-") new-size)))

  (defun cur-font ()
    (cdr (assq 'font (frame-parameters (selected-frame)))))

  (defvar min-font-size 1)
  (defun change-font-size (&optional decrease times)
    (let* ((inc (* (or times 1) (if decrease -1 1)))
           (old-font (cur-font))
           (new-font-and-size (resize-font old-font inc))
           (new-font (car new-font-and-size))
           (size (cdr new-font-and-size)))
      (unless (equal old-font new-font)
        (set-font-everywhere new-font)
        (message (format "%d %s" size new-font)))))
  (defun increase-font-size(&optional n) (interactive) (change-font-size nil n))
  (defun decrease-font-size(&optional n) (interactive) (change-font-size t n))

  (define-key global-map (kbd "C-+") 'increase-font-size)
  (define-key global-map (kbd "C--") 'decrease-font-size)

#+end_src
** Use Insert key to toggle overwrite/insert
[[https://emacs.stackexchange.com/questions/18533/how-to-use-the-insert-key-to-toggle-overwrite-mode-when-using-a-pc-keyboard-in]]
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    ;; when using Windows keyboard on Mac, the insert key is mapped to <help>
    ;; copy ctrl-insert, paste shift-insert on windows keyboard
    (global-set-key [C-help] #'clipboard-kill-ring-save)
    (global-set-key [S-help] #'clipboard-yank)

    ;; insert to toggle `overwrite-mode'
    (global-set-key [help] #'overwrite-mode))
#+end_src
* Startup
Stuff we do these after everything else has been setup so we have commands available for key-mappings
** Function Keys Mappings
Some of these are baked into my fingers from more than three decades
of (anymore remember SPF on IBM Mainframes or the Brief editor on the
first IBM PC's?)...thus, we won't be changing these often.
#+begin_src emacs-lisp
  (global-set-key (kbd "<f1>") 'goto-line)
  (global-set-key (kbd "<f2>") 'toggle-truncate-lines)
  (global-set-key (kbd "<f3>") 'align-regexp)
  ;; <f4> still available!
  ;; <f5> Defined above (used for rg search)
  ;; <f6> Defined above (used for search-replace)
  (global-set-key (kbd "<f7>") 'kmacro-start-macro) ; Keyboard macro shortcuts
  (global-set-key (kbd "<f8>") 'kmacro-end-macro)
  (global-set-key (kbd "<f9>") 'call-last-kbd-macro)
  ;; <f10> still available! (but has an existing emacs assignment)
  ;; <f11> still available! (but used by MacOS to hide all windows and display desktop.)
  ;; <f12> Used to open a new vterm (either directly or as C-<f12> for a named terminal buffer)

  ;; Swap windows (useful for org on left, dired on right (built-in as of 26.1)
  ;; (C-x C-o used to be "delete-blank-lines but i never use that)
  (global-set-key (kbd "C-x C-o") 'window-swap-states)
#+end_src
** Files to have open when we start
Yes Ken, What's the [[https://johnnydecimal.com/][Johny Decimal System]] for a thousand.
#+begin_src emacs-lisp
  (find-file "~/Repository/00-09 System/01 Org/reference/python.org")
  (find-file "~/Repository/00-09 System/01 Org/history.org")
  (find-file "~/Repository/00-09 System/01 Org/journal.org")
  (find-file "~/Repository/00-09 System/01 Org/gtd.org")
  (find-file "~/.emacs.d/config.org")

  ;; Start with this displayed on startup:
  (find-file "~/Repository/00-09 System/01 Org/projects.org")
#+end_src
* History (for sh_ts and giggles)
|------------+-------------------------------------------------------------------|
| 1990.07.13 | Make Systems (on Sunview).                                        |
| 1991.06.07 | Teknekron (X using twm).                                          |
| 1993.12.08 | Teknekron (emacs version 19).                                     |
| 1994.03.26 | Added tcl initialisation logic.                                   |
| 2006.01.08 | First real cleanup since the mid-90's (!).                        |
| 2006.10.02 | Configured into AXA Rosenberg.                                    |
| 2008.01.19 | Update/cleanup, addition of ECB, OrgMode.                         |
| 2011.04.15 | Added multiplatform support for Ubuntu & MacOS.                   |
| 2011.09.05 | Updated OrgMode for another attempt at GTD.                       |
| 2011.09.05 | Final tweaks obo EnergySolutions environment.                     |
| 2012.08.15 | Added support for Ropemacs & Pymacs for python IDE.               |
| 2012.08.28 | Added support for GRIN integration.                               |
| 2013.05.12 | Declaring dotemacs-bankruptcy! Moving to site-start architecture. |
| 2020.06.10 | Test and discard of lsp, rebuilt venv for elpy (~/emacs-venv)     |
| 2021.01.04 | Clean up of emacs folders.                                        |
| 2021.11.28 | Moved to PARA file organisation for all main directories.         |
| 2022.03.15 | Moved to support numbered file repository structure.              |
| 2022.11.21 | Part of emacs bankruptcy and move to clean use-package approach.  |
| 2024.03.02 | Cleanup of old/unused packages and store archived "history".      |
|------------+-------------------------------------------------------------------|
