#+title: Emacs Configuration
#+author: Peter Borocz
#+email: peter.borocz@gmail.com
#+options: num:nil
#+property: header-args :tangle config.el

* Base Editing Environment
** emacs
#+begin_src emacs-lisp
  (use-package emacs
    :init
    (setq
     auto-save-default                      nil       ; Stop creating autosaving files (we setup/use bbatsov's auto-save instead)
     blink-cursor-blinks                    5
     blink-cursor-delay                     0.0
     blink-cursor-interval                  0.3       ; Default is 0.5
     blink-cursor-mode                      1
     create-lockfiles                       nil       ; We don’t need lockfiles since were ONLY single-user!
     column-number-mode                     t
     debug-on-error                         nil
     debug-on-signal                        nil
     debug-on-quit                          nil
     default-directory                      (concat (getenv  "HOME") "/")
     fill-column                            96
     font-lock-maximum-decoration           t
     frame-title-format                     '("%b " (:eval (format-time-string " %Y-%m-%d %H:%M")))
     global-auto-revert-non-file-buffers    t         ; Revert Dired and other buffers on changes
     global-font-lock-mode                  1
     indent-tabs-mode                       nil       ; Make sure spaces are used when indenting anything!
     inhibit-compacting-font-caches         t         ; https://github.com/sabof/org-bullets/issues/11#issuecomment-439228372
     inhibit-default-init                   t
     inhibit-splash-screen                  t
     initial-scratch-message                nil       ; Start scratch buffers empty..
     make-backup-files                      nil       ; Stop creating backup~ files
     ring-bell-function                     'ignore
     scroll-conservatively                  1000
     search-highlight                       t
     sentence-end-double-space              nil       ; Period single space ends sentence
     switch-to-buffer-obey-display-actions  t         ; https://www.masteringemacs.org/article/demystifying-emacs-window-manager: Switching Buffers
     truncate-lines                         t         ; Start out with NO line truncation.
     uniquify-after-kill-buffer-p           t         ; Rename after killing uniquified
     uniquify-buffer-name-style             'forward  ; https://github.com/bbatsov/prelude
     uniquify-ignore-buffers-re             "^\\*"    ; Don't muck with special buffers
     uniquify-separator                     "/"
     use-dialog-box                         nil       ; Don't popup UI dialogs when prompting
     use-short-answers                      t         ; Used for emacs >= 29.
     user-full-name                         "Peter Borocz"
     vc-follow-symlinks                     t         ; https://stackoverflow.com/questions/15390178/emacs-and-symbolic-links#15391387
     visible-bell                           t
     word-wrap                              nil
     x-stretch-cursor                       t
     yank-excluded-properties              't         ; Clipboard yank is pasting graphics from Microsoft instead of text...strip all properties!
     ))

  ;; In emacs 29+, seems like toggle-debug-on-quit is flipped to T by default,
  ;; causing C-g for minibuffer-quit to start the debugger(!). We don't want that.
  ;; per https://emacs.stackexchange.com/questions/70177/how-can-i-apply-toggle-debug-on-quit-ignore-debugger-entered-lisp-error/70180
  (add-to-list 'debug-ignored-errors 'minibuffer-quit)

  ;; Define all aliases for buffer management
  (defalias 'list-buffers 'ibuffer)  ; Use ibuffer default for all buffer management

  ;; Don't let Emacs suspend by getting rid of pesky "\C-z" and "\C-x\C-z" annoying minimize
  (unbind-key "C-z")
  (unbind-key "M-z")

  (global-auto-revert-mode 1) ;; refresh a buffer if changed on disk
  (recentf-mode 1)            ;; remember recently edited files (M-x recentf-open-files to show)

  (use-package paren
    :defer 1
    :init
    (setq show-paren-delay 0)  ; We want matching parens to show immediately
    :config
    (show-paren-mode t))
#+end_src
** dashboard
#+begin_src emacs-lisp
  (use-package light-dashboard

    :straight (light-dashboard :type git :host github :repo "ichernyshovvv/light-dashboard")

    :custom
    (light-dashboard-alist
     '(

       ("Projects"
        ("-Root-"           (dired "~/Repository/10-19 Development/10 Development"))
        ("Coctione Libri"   (dired "~/Repository/10-19 Development/10 Development/10.23 coctione_libri"))
        ("Optimus Ludos"    (dired "~/Repository/10-19 Development/10 Development/10.01 optimus_ludos"))
        ("Health Dashboard" (dired "~/Repository/10-19 Development/10 Development/10.06 health-activity-dashboard"))
        )

       ("Management"
        ("GTD.org"      (find-file "~/Repository/00-09 System/01 Org/gtd.org")      "g")
        ("Projects.org" (find-file "~/Repository/00-09 System/01 Org/projects.org") "p")
        )

       ("Utility"
        ("Emacs Configuration" (find-file "~/.emacs.d/config.org"))
        ("Python"              (find-file "~/Repository/00-09 System/01 Org/reference/python.org"))
        )

       ))

    :config
    (setq light-dashboard-buffer-name "HOME") ;; He defaults to *light-dashboard* but I want something more generic.
    (light-dashboard-open)
    )
#+end_src
** anzu (nicer search-replace)
Highlight global-search-replace strings dynamically.
#+begin_src emacs-lisp
  (use-package anzu
    :defer 5
    :straight t
    :config
    (global-anzu-mode)
    )
#+end_src
** hungry-deletes (aggressively delete white-space)
[[https://github.com/hrehfeld/emacs-smart-hungry-delete]]
#+begin_src emacs-lisp
  (use-package smart-hungry-delete
    :defer 10
    :bind (([remap delete-char]                   . smart-hungry-delete-forward-char)
       ([remap org-delete-char]               . smart-hungry-delete-forward-char)
       ([remap backward-delete-char-untabify] . smart-hungry-delete-backward-char)
       ([remap delete-backward-char]          . smart-hungry-delete-backward-char))
    :init (smart-hungry-delete-add-default-hooks))
#+end_src
** dired (customise by dired display)
[[https://github.com/MatthewZMD/.emacs.d]]
[[https://www.emacswiki.org/emacs/DiredSortDirectoriesFirst][Sort dired listings with directories first]]
*** dired
#+begin_src emacs-lisp
  (use-package dired
    :straight (:type built-in)

    :config
    (add-hook 'dired-mode-hook
      (lambda () (setq truncate-lines t)))

    :bind (:map dired-mode-map
        ("C-x C-d" . dired-jump)
        ("C-x j"   . dired-jump-other-window)
        ("e"       . dired-toggle-read-only) ; Inline filename editing!
        ("."       . dired-up-directory))

    :config
    (setq auto-revert-verbose             nil ;; Auto refresh Dired, but be quiet about it
      delete-by-moving-to-trash           t
      dired-dwim-target                   t
      dired-hide-details-mode             nil
      dired-listing-switches              "-Al"
      dired-recursive-copies              'always
      dired-recursive-deletes             'always
      dired-use-ls-dired                  t
      dired-vc-rename-file                t ;; https://xenodium.com/emacs-git-rename-courtesy-of-dired/
      global-auto-revert-non-file-buffers t
      insert-directory-program            "/usr/local/bin/gls"
      wdired-allow-to-change-permissions  t
      )
    )

  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil))

  ;;
  ;; Color our dired display by type of file/directory
  ;; https://github.com/purcell/diredfl
  ;;
  (add-hook 'dired-mode-hook 'diredfl-mode)
#+end_src
*** dired-gitignore
Toggle between showing just ".git-ted" files and all files.
#+begin_src emacs-lisp
  (use-package dired-gitignore
    :after dired
    :config
    (define-key dired-mode-map (kbd "H") #'dired-gitignore-global-mode) ;; into your startup files. Then you will hide and show the gitignored files in a dired buffer by hitting the H key.
    )
#+end_src
*** dired-subtree
#+begin_src emacs-lisp
  (use-package dired-subtree
    :after dired
    :config
    (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
    (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))
#+end_src
*** dired-casual
#+begin_src emacs-lisp
  (use-package casual-dired
    :ensure t
    :straight (casual-dired :type git :host github :repo "kickingvegas/casual-dired")
    :bind (:map dired-mode-map
        ("C-o" . 'casual-dired-tmenu)
        ("s"   . 'casual-dired-sort-by-tmenu))
  )
#+end_src
** helpful (better help commands)
Improve quality of most-used C-h methods.
#+begin_src emacs-lisp
  (use-package helpful
    :demand t
    :bind
    ;; Note that the built-in `describe-function' includes both functions
    ;; and macros. `helpful-function' is functions only, so we provide
    ;; `helpful-callable' as a drop-in replacement.
    ("C-h f" . helpful-callable)
    ("C-h v" . helpful-variable)
    ("C-h k" . helpful-key)
    ("C-h x" . helpful-command)

    ;; I also recommend the following keybindings to get the most out of helpful:
    ;; Lookup the current symbol at point. C-c C-d is a common keybinding
    ;; for this in lisp modes.
    ("C-c C-d" . helpful-at-point)

    ;; Look up *F*unctions (excludes macros).
    ;;
    ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
    ;; already links to the manual, if a function is referenced there.
    ("C-h F"  . helpful-function)
    )

#+end_src
** pbcopy (allow interaction with MacOS clipboard and kill/yank ring)
#+begin_src emacs-lisp
  (use-package pbcopy
    :defer t
    )
#+end_src
** saveplace (save last-editing location)
#+begin_src emacs-lisp
  (use-package saveplace
    :defer 1

    :config
    (setq-default save-place t)

    :init
    (save-place-mode 1)
    )
#+end_src
** super-save (save on buffer switch)
[[https://github.com/bbatsov/super-save][GitHub - bbatsov/super-save: Save Emacs buffers when they lose focus]]:
Best description is from package site itself: "super-save auto-saves
your buffers, when certain events happen - e.g. you switch between
buffers, an Emacs frame loses focus, etc. You can think of it as both
something that augments and replaces the standard auto-save-mode."
#+begin_src emacs-lisp
  (use-package super-save
    :defer 1

    :config
    (super-save-mode 1)
    )
#+end_src
** unfill
https://github.com/purcell/unfill
 #+begin_src emacs-lisp
   (use-package unfill
     :defer 1

     :bind (("M-Q" . unfill-paragraph))
     )
#+end_src
** whitespace-cleanup
#+begin_src emacs-lisp
  (use-package whitespace-cleanup-mode
    :defer 1

    :init
    (setq whitespace-cleanup-mode-only-if-initially-clean nil)

    :config
    (global-whitespace-cleanup-mode 1)
    )
#+end_src
** yasnippet
While the majority of the time, I don't rely on snippets, there are a
very select /few/ that I consider worthwhile, thus, keep use of
yasnippets for now (but make sure they don't expand within comments!)
#+begin_src emacs-lisp
  ;; Don't do snippet expansion within comments/docstrings for py:
  ;; (https://stackoverflow.com/questions/25521897/how-to-never-expand-yasnippets-in-comments-and-strings)
  (defun pb/yas-no-expand-in-comment_string ()
    (setq yas-buffer-local-condition
      '(if (nth 8 (syntax-ppss)) ;; non-nil if in a string or comment
       '(require-snippet-condition . force-in-comment)
     t)))

  (use-package yasnippet
    :defer 1
    :config
    ;; Bind `SPC' to `yas-expand' when snippet expansion available (it will still call `self-insert-command' otherwise)
    (define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand)
    ;; Use the method above to keep snippets only when we're writing actual code.
    ;; (add-hook 'prog-mode-hook 'yas-no-expand-in-comment/string)
    (add-hook 'python-ts-mode-hook   #'yas-minor-mode)
    (add-hook 'python-base-mode-hook #'yas-minor-mode)
    (add-hook 'prog-mode-hook        #'pb/yas-no-expand-in-comment_string)
    (yas-global-mode 1)
    (yas-reload-all)
    )
#+end_src
* Display
** fonts
Interactive font scaling:
  - For all frames     -> M-x increase-font-size/decrease-font-size (C-+ and C-- respectively)
  - For current buffer -> M-x text-scale-adjust

 Which one is currently displayed?
   - M-x describe-font <cr> <cr>

 Set a new font interactively:
   - M-x set-frame-font (Pick from list!)

 History of fonts actually tried for more than one day!:
 - (defvar pb/var-fixedwidth-font "-*-DM Mono-normal-normal-normal-*-%d-*-*-*-m-0-iso10646-1")
 - (defvar pb/var-fixedwidth-font "-*-Astigmata-medium-normal-normal-*-%d-*-*-*-p-0-iso10646-1")

#+begin_src emacs-lisp

  (defvar pb/var-variablewidth-font "-*-Open Sans-normal-normal-normal-*-%d-*-*-*-p-0-iso10646-1")
  (defvar pb/var-fixedwidth-font    "-*-SauceCodePro Nerd Font Mono-light-normal-normal-*-%d-*-*-*-m-0-iso10646-1")

  ;; Tools for interactive use when moving between monitor and laptop displays without restarting
  ;; (and used below to auto-set font size on startup)
  (defun pb/set-monitor-font-size ()
    "Set font obo 4K monitor."
    (interactive)
    (set-frame-font (format pb/var-fixedwidth-font 20))
    )

  (defun pb/set-laptop-font-size ()
    "Set font obo laptop display."
    (interactive)
    (set-frame-font (format pb/var-fixedwidth-font 14))
    )

  (setq ns-use-thin-smoothing t)
  (if (and (display-graphic-p)
       (>= (x-display-pixel-width) 3840))
      (progn
    (pb/set-monitor-font-size)
    )
    (progn
      (when (and (display-graphic-p) (< (x-display-pixel-width) 3840))
    (pb/set-laptop-font-size)
    )
      )
    )
#+end_src
** mode-line
Nice and simple: https://github.com/jessiehildebrandt/mood-line
#+begin_src emacs-lisp
  (use-package mood-line
    :init
    (custom-set-faces
     '(mode-line-active   ((t (:family "SauceCodePro Nerd Font Mono" :height 1.0))))
     '(mode-line-inactive ((t (:family "SauceCodePro Nerd Font Mono" :height 0.7))))
     )
    (mood-line-mode)
    )
#+end_src
** pulsar
[[https://protesilaos.com/emacs/pulsar]]
#+begin_src emacs-lisp
  (use-package pulsar
    :defer 1
    :straight (pulsar :type git :host github :repo "protesilaos/pulsar")
    :config
      (setq pulsar-delay  0.10
        pulsar-face  'pulsar-yellow
        pulsar-pulse nil)

      (dolist (hook '(org-mode-hook python-mode-hook yaml-mode-hook text-mode-hook emacs-lisp-mode-hook dired-mode-hook web-mode-hook))
    (add-hook hook #'pulsar-mode))

      (add-hook 'next-error-hook #'pulsar-pulse-line)

      (pulsar-global-mode 1)
      )
#+end_src
** rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :defer 1
    :config
    (set-face-attribute 'rainbow-delimiters-unmatched-face nil
        :foreground 'unspecified
        :inherit 'error)
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

  (use-package prog-mode
    :straight (:type built-in)
    :hook ((prog-mode . rainbow-delimiters-mode)))
 #+end_src
** rainbow-mode
Display colour codes in the actual colour they represent, e.g. #0000ff (should be white text on a blue background)
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :demand t
    :hook (prog-mode)
    )
#+end_src
** theme
#+begin_src emacs-lisp
    (use-package gruvbox-theme
      :demand t
      :config
      (load-theme 'gruvbox-dark-hard t)
      (custom-set-faces
       '(org-level-1            ((t (:height 1.15))))
       '(org-level-2            ((t (:height 1.10))))
       '(org-level-3            ((t (:height 1.05))))
       '(org-level-4            ((t (:foreground "#b8bb26")))) ;; Swap these as level 4 shows up a lot in my
       '(org-level-5            ((t (:foreground "#fb4933")))) ;; projects.org file for GTD's and red is too harsh!
       '(font-lock-doc-face     ((t (:foreground "#666666" :height 0.9))))
       '(font-lock-comment-face ((t (:foreground "#666666" :height 0.9))))
       '(org-document-title     ((t (:height 1.5 :underline nil))))
       )
      )
#+end_src
** hl-line-mode
#+begin_src emacs-lisp
  (add-hook  'org-mode-hook #'hl-line-mode)
  (add-hook 'prog-mode-hook #'hl-line-mode)
#+end_src
** nerd-icons-ibuffer
Displays nerd-icons for iBuffer types...yes, somewhat indulgent but I'm worth it ;-)
#+begin_src emacs-lisp
  (use-package nerd-icons-ibuffer
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode)
    )
#+end_src
* Window Management
** bindings
#+begin_src emacs-lisp
  ;; Swap windows (useful for org on left, dired on right (built-in as of 26.1)
  ;; (C-x C-o used to be "delete-blank-lines but i never use that)
  (global-set-key (kbd "C-x C-o") 'window-swap-states)
#+end_src
** zoom
[[https://github.com/cyrus-and/zoom][GitHub - cyrus-and/zoom: Fixed and automatic balanced window layout for Emacs]]
#+begin_src emacs-lisp
  (use-package zoom
    :defer 2
    :config
    (zoom-mode 1))
#+end_src
** zygospore
Toggles between "current" buffer to fullscreen and existing buffer layout (and back again)
#+begin_src emacs-lisp
  (use-package zygospore
    :defer 2
    )
  (global-set-key (kbd "C-x 1") 'zygospore-toggle-delete-other-windows)
#+end_src
* Completion Framework
** company
[[Https://emacs.stackexchange.com/questions/13286/how-can-i-stop-the-enter-key-from-triggering-a-completion-in-company-mode][How can I stop the enter key from triggering a completion in company mode?]]
#+begin_src emacs-lisp
  (use-package company
    :defer 2
    :delight company-mode  ;; Turns off the listing of company mode in list of minor modes (e.g. modeline)
    :init
    (setq company-idle-delay 0.1
      company-minimum-prefix-length 1)

    :bind (:map company-active-map
       ("C-n" . company-select-next)
       ("C-p" . company-select-previous))

    :config
    (global-company-mode))
#+end_src
** consult
#+begin_src emacs-lisp
  (use-package consult
    :defer 2
    :bind
    ("C-x b" . consult-buffer) ;; originally 'switch-to-buffer'
    ("M-s"   . consult-line)   ;; keep C-s for regular isearch so we can search within a line..
    :config
    (consult-customize
     consult-theme
     consult-ripgrep
     consult-git-grep
     consult-grep
     consult-bookmark
     consult-recent-file
     consult-xref
     consult--source-bookmark
     consult--source-file-register
     consult--source-recent-file
     consult--source-project-recent-file
     :preview-key nil
    )
  )
#+end_src
** marginalia
#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    :defer 2
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
       ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init
    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src
** orderless
Resources:
- [[https://youtu.be/J0OaRy85MOo?feature=shared][Streamline Your Emacs Completions with Vertico - YouTube]]
- [[https://kristofferbalintona.me/posts/202202211546/][Vertico, Marginalia, All-the-icons-completion, and Orderless | Kristoffer Bal...]]
#+begin_src emacs-lisp
  ;; https://github.com/minad/consult/wiki#minads-orderless-configuration
  (use-package orderless
    :demand t
    :config

    (defun +orderless--consult-suffix ()
      "Regexp which matches the end of string with Consult tofu support."
      (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
      (format "[%c-%c]*$"
          consult--tofu-char
          (+ consult--tofu-char consult--tofu-range -1))
    "$"))

    ;; Recognizes the following patterns:
    ;; * .ext (file extension)
    ;; * regexp$ (regexp matching at end)
    (defun +orderless-consult-dispatch (word _index _total)
      (cond
       ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
       ((string-suffix-p "$" word)
    `(orderless-regexp . ,(concat (substring word 0 -1) (+orderless--consult-suffix))))
       ;; File extensions
       ((and (or minibuffer-completing-file-name
         (derived-mode-p 'eshell-mode))
         (string-match-p "\\`\\.." word))
    `(orderless-regexp . ,(concat "\\." (substring word 1) (+orderless--consult-suffix))))))

    ;; Define orderless style with initialism by default
    (orderless-define-completion-style +orderless-with-initialism
      (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp)))

    ;; You may want to combine the `orderless` style with `substring` and/or `basic`.
    ;; There are many details to consider, but the following configurations all work well.
    ;; Personally I (@minad) use option 3 currently. Also note that you may want to configure
    ;; special styles for special completion categories, e.g., partial-completion for files.
    ;;
    ;; 1. (setq completion-styles '(orderless))
    ;; This configuration results in a very coherent completion experience,
    ;; since orderless is used always and exclusively. But it may not work
    ;; in all scenarios. Prefix expansion with TAB is not possible.
    ;;
    ;; 2. (setq completion-styles '(substring orderless))
    ;; By trying substring before orderless, TAB expansion is possible.
    ;; The downside is that you can observe the switch from substring to orderless
    ;; during completion, less coherent.
    ;;
    ;; 3. (setq completion-styles '(orderless basic))
    ;; Certain dynamic completion tables (completion-table-dynamic)
    ;; do not work properly with orderless. One can add basic as a fallback.
    ;; Basic will only be used when orderless fails, which happens only for
    ;; these special tables.
    ;;
    ;; 4. (setq completion-styles '(substring orderless basic))
    ;; Combine substring, orderless and basic.
    ;;
    (setq completion-styles '(substring orderless basic)
      completion-category-defaults nil
      ;; Enable partial-completion for files.
      ;; Either give orderless precedence or partial-completion.
      ;; Note that completion-category-overrides is not really an override,
      ;; but rather prepended to the default completion-styles.
      ;; completion-category-overrides '((file (styles orderless partial-completion))) ;; orderless is tried first
      completion-category-overrides '((file (styles partial-completion)) ;; partial-completion is tried first
                      ;; enable initialism by default for symbols
                      (command (styles +orderless-with-initialism))
                      (variable (styles +orderless-with-initialism))
                      (symbol (styles +orderless-with-initialism)))
      orderless-component-separator #'orderless-escapable-split-on-space ;; allow escaping space with backslash!
      orderless-style-dispatchers (list #'+orderless-consult-dispatch
                        #'orderless-affix-dispatch)))
#+end_src
** vertico
Resources:
- [[https://youtu.be/J0OaRy85MOo?feature=shared][Streamline Your Emacs Completions with Vertico - YouTube]]
- [[https://kristofferbalintona.me/posts/202202211546/][Vertico, Marginalia, All-the-icons-completion, and Orderless | Kristoffer Bal...]]
#+begin_src emacs-lisp
  (use-package vertico
    :demand t
    :config
    (setq vertico-cycle         t ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
      vertico-scroll-margin 0
      vertico-resize        nil
      vertico-count         15)
    :init
    (vertico-mode)
    )

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setq read-extended-command-predicate #'command-completion-default-include-p)
#+end_src
* File Types/Modes
** css
#+begin_src emacs-lisp
  (use-package css-mode
    :defer 2
    :custom
    (css-indent-offset 2))
#+end_src
** csv
#+begin_src emacs-lisp
  (use-package csv-mode
    :defer t
    :init
    (add-to-list 'auto-mode-alist '("\\*.csv$" . csv-mode))
    (add-to-list 'auto-mode-alist '("\\*.tsv$" . csv-mode))
  )
#+end_src
** graphviz-dot-mode
#+begin_src emacs-lisp
  (use-package graphviz-dot-mode
    :defer t
    :config
    (setq graphviz-dot-indent-width 4))
#+end_src
** justfile
#+begin_src emacs-lisp
  (use-package just-mode
    :defer t
    :config
    (add-to-list 'auto-mode-alist '("\\justfile?\\'" . just-mode))
    )
#+end_src
** markdown
*** markdown
Specifically, GithubFlavoredMarkdown-mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :defer t

    :mode ("*\\.md\\'" . gfm-mode)

    :init
    (setq
     markdown-command      "multimarkdown"
     markdown-open-command "/usr/local/bin/mark") ;; Opens application -> Marked2

    :config
    (add-hook 'markdown-mode-hook 'visual-line-mode)
    (add-hook 'markdown-mode-hook 'pb/markdown-config)
    ;;(add-hook 'markdown-mode-hook 'pb/variable-width-face-mode)
    )

  (defun pb/markdown-config ()
    (local-set-key (kbd "M-q") 'ignore))
#+end_src
*** olivetti
https://github.com/rnkn/olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :defer t

    :init
    (setq olivetti-body-width 0.66)

    :hook
    ((markdown-mode . olivetti-mode))
    )
#+end_src
** org
*** org
#+begin_src emacs-lisp
  ;; -----------------------------------------------------------------------------
  ;; Packages
  ;; -----------------------------------------------------------------------------
  (use-package org
    :demand t
    :straight (:type built-in)
    :bind (:map org-mode-map
    ("C-M-<return>" . org-insert-subheading)
    ("C-c l"        . org-store-link)
    ("C-c L"        . org-cliplink)
    ("C-c a"        . org-agenda)
    ("C-c |"        . org-table-create-or-convert-from-region)
    ("C-c C-<"      . org-promote-subtree)
    ("C-c C->"      . org-demote-subtree)
    ("C-<right>"    . org-metaright)
    ("C-<left>"     . org-metaleft)
    )

    :config
    (add-hook 'text-mode-hook #'visual-line-mode)
    (visual-line-mode 1)

    ;; https://sachachua.com/blog/2024/01/org-mode-custom-link-copy-to-clipboard/
    (org-link-set-parameters
     "copy"
     :follow (lambda (link) (kill-new link))
     :export (lambda (_ desc &rest _) desc))

    :init
    (setq fill-column               96 ;; Org won't use the global fill-column, set here explicitly?
      org-catch-invisible-edits 'show-and-error
      org-ellipsis              "…" ;; ▼ …, ↴ ⤵, ▼, ↴, ⬎, ⤷, ⋱
      org-hide-leading-stars    t
      org-return-follows-link   t
      org-startup-folded        t
      org-startup-indented      t
      org-link-frame-setup      '((file . find-file))) ;; Don't want the default of find-file-other-window
    )

  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

  ;; Allow for links like [[file:~/dev/foo][Code]] to open a dired on Return (or C-c C-o)
  ;; https://emacs.stackexchange.com/questions/10426/org-mode-link-to-open-directory-in-dired
  ;; (add-to-list 'org-file-apps '(directory . emacs))

  ;; ---------------------------------------------------------------------------
  ;; GTD Configuration
  ;; ---------------------------------------------------------------------------
  ;; Keywords: this sequence is on behalf of regular TO-DO items in my GTD world.
  (setq org-todo-keywords '((sequence
         "TODO(t)"
         "WAIT(a)"
         "HOLD(h)"
         "WORK(w)"
         "|"
         "DONE(x)"
         )))

  (setq org-todo-keyword-faces
    '(("TODO" . "systemOrangeColor") ;; used to be org-warning aka "#fb4933".
      ("WORK" . "light green")
      ("HOLD" . "systemBrownColor")
      ("WAIT" . "systemBrownColor")
      ("DONE" . "gray30")
      ))

  ;; Format of TODO items (defined like this so the entire headline is NOT colored across, just the TODO keyword.)
  (setq org-fontify-todo-headline nil)

  ;; Format of DONE items (defined like this so the entire headline is colored across, not just the DONE keyword.)
  (setq org-fontify-done-headline t)
  ;; <2024-05-05 Sun> (set-face-attribute 'org-done          nil :foreground "gray30" :strike-through nil)
  ;; <2024-05-05 Sun> (set-face-attribute 'org-priority      nil :foreground "gray30" :strike-through nil)
  ;; <2024-05-05 Sun> (set-face-attribute 'org-headline-done nil :foreground "gray30" :strike-through nil)

  ;; ---------------------------------------------------------------------------
  ;; Capture templates
  ;; ---------------------------------------------------------------------------
  (define-key global-map (kbd "C-c c") 'org-capture)
  (setq org-capture-templates
    '(
      ("t" "GTD"      entry (file+headline "/Users/peter/Repository/00-09 System/01 Org/gtd.org" "INBOX") "** TODO %?\n\n")
      ("p" "Projects" entry (file          "/Users/peter/Repository/00-09 System/01 Org/projects.org"   ) "* TODO %?\n\n" :prepend t)
      ("j" "Journal"  entry (file+datetree "/Users/peter/Repository/00-09 System/01 Org/journal.org"    ) "*** %?")
      ))

  ;; Insert date-time stamp like org but everywhere.
  (global-set-key (kbd "C-c .") 'org-time-stamp)

#+end_src
*** babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (js         . t)
     (python     . t)
     (shell      . t)
     (sqlite     . t)
     ))
  (setq org-confirm-babel-evaluate nil)
#+end_src
*** org-appear
 #+begin_src emacs-lisp
   (use-package org-appear
     :defer 1
     :hook
     (org-mode . org-appear-mode)
     )
 #+end_src
*** org-linker
[[https://github.com/jcguu95/org-linker.el/tree/master?tab=readme-ov-file#customizable-variables][GitHub - jcguu95/org-linker.el: Attaching Files in Org-Mode Using UUIDs. Flex...]]
 #+begin_src emacs-lisp
   (defun pb/org-linker/generate-id ()
     "Generate an id, ie. YYYYMMDD-<id> (thanks GPT-4)."
     (let ((current-date (format-time-string "%Y%m%d"))
       (id (replace-regexp-in-string "[[:space:]\n]*$" ""
         (shell-command-to-string "openssl rand -hex 6"))))
       (format "%s-%s" current-date id)))

   (straight-use-package
    '(org-linker
      :type git
      :host github
      :repo "jcguu95/org-linker.el"
      :files ("org-linker.el"
          "org-linker-commands.el"
          "org-linker-org-link-support.el"
          )
      )
    )
   (load "~/.emacs.d/straight/repos/org-linker.el/org-linker.el")

   (setq org-linker/root-directory      (concat (getenv "HOME") "/Repository/00-09 System/99 org-linker-storage/")
     org-linker/file-size               999999
     org-linker/uuid-generator-function 'pb/org-linker/generate-id
     org-linker/trashing-function       (lambda (file) (move-file-to-trash file))
     )
 #+end_src
*** org-cliplink
Create an org-link from a URL in the clipboard with the actual title of the URL as the link title.
 #+begin_src emacs-lisp
   (use-package org-cliplink
     :after 'org
     )
 #+end_src
*** org-superstar
Nice(r) bullets (replaces org-bullets)
 #+begin_src emacs-lisp
   (use-package org-superstar
     :after 'org
     :config
     (setq org-superstar-special-todo-items t ;; Set our TODO items to have a 'checkbox' icon
       org-superstar-item-bullet-alist
       '((?* . ?•)
         (?+ . ?➤)
         (?- . ?•)))
     (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
     )
 #+end_src
** pdf
#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer 5
    :config
    (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
    )
  (pdf-tools-install)
#+end_src
** text-mode
#+begin_src emacs-lisp
  (setq text-mode-hook
    '(lambda ()
       (auto-fill-mode 0)
       (setq tab-width 4)
       ))
  (setq default-major-mode 'text-mode)
#+end_src
** toml-mode
#+begin_src emacs-lisp
  (use-package toml-mode
    :defer t
    )
#+end_src
** yaml-mode
#+begin_src emacs-lisp
  (use-package yaml-pro
    :defer t
    :hook
    (yaml-mode . yaml-pro-ts-mode)
    )
#+end_src
** web/mmm-mode
#+begin_src emacs-lisp
  (use-package mmm-mode
    :defer t

    :config
    (setq mmm-global-mode 'auto)
    (add-to-list 'auto-mode-alist '("\\.html$"     . web-mode))
    (add-to-list 'auto-mode-alist '("\\.htmx$"     . web-mode))
    (add-to-list 'auto-mode-alist '("\\.dhtml$"    . web-mode))
    (add-to-list 'auto-mode-alist '("\\.jinja2\\'" . html-mode))

    ;; <2024-03-27 Wed> Starting to get some "Error running timer ‘mmm-mode-idle-reparse’: (wrong-type-argument integer-or-marker-p nil)" errors
    ;; (use-package mmm-jinja2
    ;;   :load-path "~/.emacs.d/site-lisp/mmm-jinja2/"
    ;;   :init
    ;;   (setq mmm-global-mode 'maybe
    ;;     mmm-parse-when-idle 't)
    ;;   )

    (use-package web-mode
      :config
      (add-to-list 'web-mode-engines-alist '(("django" . "\\.html$")))
      (add-to-list 'web-mode-engines-alist '(("django" . "\\.htmx$")))
    )

    ;; <2024-03-27 Wed> Starting to get some "Error running timer ‘mmm-mode-idle-reparse’: (wrong-type-argument integer-or-marker-p nil)" errors
    ;; (mmm-add-mode-ext-class 'web-mode  "\\.html?\\'"  'jinja2)
    ;; (mmm-add-mode-ext-class 'html-mode "\\.jinja2\\'" 'jinja2)
    )

  ;; Copy what we did for IRIS at ES, ie, have HTML indenting match Python:
  (defun pb-web-mode-hook ()
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset    2)
    (setq web-mode-code-indent-offset   2)
    (setq web-mode-indent-style         2)
    )
  (add-hook 'web-mode-hook 'pb-web-mode-hook)
#+end_src
** tree-sitter
- As of <2023-08-14 Mon> Working 29.1! (from https://github.com/railwaycat/homebrew-emacsmacport)
  (with some help from [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][How to Get Started with Tree-Sitter - Mastering Emacs]])
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
    '(
      (bash       "https://github.com/tree-sitter/tree-sitter-bash")
      (cmake      "https://github.com/uyha/tree-sitter-cmake")
      (css        "https://github.com/tree-sitter/tree-sitter-css")
      (html       "https://github.com/tree-sitter/tree-sitter-html")
      (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
      (json       "https://github.com/tree-sitter/tree-sitter-json")
      (make       "https://github.com/alemuller/tree-sitter-make")
      (markdown   "https://github.com/ikatyang/tree-sitter-markdown")
      (python     "https://github.com/tree-sitter/tree-sitter-python")
      (toml       "https://github.com/tree-sitter/tree-sitter-toml")
      (yaml       "https://github.com/ikatyang/tree-sitter-yaml"))
    )

  (use-package treesit-auto
    :config
    (global-treesit-auto-mode)
    )
#+end_src
* Code Development
** eglot (obo python and yaml)
- Great reference for comprehensive python config: [[https://config.phundrak.com/emacs/packages/programming.html#python][Programming | Phundrak's Dotfiles]]
- [[https://github.com/joaotavora/eglot][GitHub - joaotavora/eglot: A client for Language Server Protocol servers]]
- [[https://ddavis.io/posts/emacs-python-lsp/][Python with Emacs: py(v)env and lsp-mode]]
- [[https://whatacold.io/blog/2022-01-22-emacs-eglot-lsp/][Eglot for better programming experience in Emacs - whatacold's space]]
*** eglot
#+begin_src emacs-lisp
  ;; https://grtcdr.tn/dotfiles/emacs/emacs.html#orgdb7d3a6
  (use-package eglot
    :defer 2

    :commands
    (eglot eglot-ensure)

    :hook
    ((python-ts-mode yaml-ts-mode) . eglot-ensure)

    :bind
    (:map eglot-mode-map
      ("C-c e a" . eglot-code-actions)
      ("C-c e f" . eglot-format)
      ("C-c e r" . eglot-rename)
      ("C-c f d" . flymake-show-project-diagnostics)
      ("C-c f n" . flymake-goto-next-error)
      ("C-c f p" . flymake-goto-prev-error)
      ("C-c x a" . xref-find-apropos)
      ("C-c x f" . xref-find-definitions)
      ("C-c x r" . xref-find-references))

    :config
    ;; "Emacs by default caps the number of bytes read from a subprocess in a single chunk to 4KB.
    ;; However, modern machines can take on a lot more. Set it to 1MB which is equal to the limit
    ;; defined in /proc/sys/fs/pipe-max-size/."
    ;;
    ;; Refs:
    ;; https://grtcdr.tn/dotfiles/emacs/emacs.html#orgdb7d3a6 Ref:
    ;; https://github.com/jwiegley/dot-emacs/blob/2b4c57963413cb80e8716f014f25eaf4850c369c/init.org#eglot
    (setq read-process-output-max (* 1024 1024))

    :custom
    (eglot-autoshutdown t)
    (eglot-menu-string "eglot")
    (eglot-ignored-server-capabilities '(:documentHighlightProvider))
    )

  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
     '(python-ts-mode . ("~/.local/bin/ruff-lsp"))))

#+end_src
*** pyvenv-auto
#+begin_src emacs-lisp
  ;; ref: https://grtcdr.tn/dotfiles/emacs/emacs.html#orgdb7d3a6
  (use-package pyvenv-auto
    :defer 1

    :custom
    (pyvenv-auto-mode t)
    )
#+end_src
*** treesit-auto
[[https://github.com/renzmann/treesit-auto][GitHub - renzmann/treesit-auto: Automatic installation, usage, and fallback f...]]
#+begin_src emacs-lisp
  (use-package treesit-auto
    :defer 1

    :config
    (global-treesit-auto-mode)
    (setq treesit-auto-install t)
    )
#+end_src
** envrc
[[https://github.com/purcell/envrc]]
#+begin_src emacs-lisp
  (use-package envrc
    :defer 1

    :config
    (envrc-global-mode)
    )
#+end_src
** format-all
Auto-format whole buffer, h/t: [[https://ianyepan.github.io/posts/format-all/][Ian YE Pan]]
#+begin_src emacs-lisp
  (use-package format-all
    :defer 1

    :commands
    (format-all-mode format-all-region-or-buffer)

    :hook
    ((python-mode python-ts-mode) . (lambda ()
              (setq format-all-formatters '(("Python" ruff)))))

    :config
    (format-all-ensure-formatter)

    (setq-default format-all-formatters '(("Python" ruff)))

    (global-set-key (kbd "M-F") #'format-all-buffer)

    )
#+end_src
** magit & git
*** magit
#+begin_src emacs-lisp
  (use-package magit
    :demand t

    :bind
    ("C-x C-g" . magit-status)

    :config
    (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
    (setq magit-log-margin '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18)))

  ;; Full screen magit-status
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))

  (defun magit-quit-session ()
    "Restores the previous window configuration and kills the magit buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen))


#+end_src
*** magit-delta
Use the wonderful delta diff tool in magit diff display.
#+begin_src emacs-lisp
  (use-package magit-delta
    :after magit
    :hook (magit-mode . magit-delta-mode))
#+end_src
*** magit-file-icons
[[https://github.com/gekoke/magit-file-icons/tree/d85fad81e74a9b6ce9fd7ab341f265d5a181d2a8][Github: magit-file-icons]]
#+begin_src emacs-lisp
  (use-package magit-file-icons
    :after magit

    :straight (:host github :repo "gekoke/magit-file-icons")

    :defer 1

    :init
    (magit-file-icons-mode 1)

    :custom
    ;; These are the default values:
    (magit-file-icons-enable-diff-file-section-icons t)
    (magit-file-icons-enable-untracked-icons         t)
    (magit-file-icons-enable-diffstat-icons          t)
    )
#+end_src
*** magit-todos
#+begin_src emacs-lisp
  (use-package magit-todos
    :after magit
    :config
    (setq magit-show-long-lines-warning nil)
    (magit-todos-mode 1)
    )
#+end_src
*** full-frame
Use a single-window (part. for Magit) and then close.
#+begin_src emacs-lisp
  (use-package fullframe
    :defer 1
    :config (fullframe magit-status magit-mode-quit-window)
    )
#+end_src
*** git-timemachine
 #+begin_src emacs-lisp
   (use-package git-timemachine
     :defer 1
     )
 #+end_src
*** git-gutter
 #+begin_src emacs-lisp
   (use-package git-gutter
     :straight (:build t)
     :defer 1

     :init
     (global-git-gutter-mode +1)

     :config
     (setq git-gutter:disabled-modes '(org-mode image-mode))
     )
 #+end_src
*** ibuffer-git
#+begin_src emacs-lisp
  (use-package ibuffer-git
    :defer 1
    :after git
    )
#+end_src
* External Tools & Services
** aspell
Live spell checking.
NOTE!: This requires a local/manual installation (ie. outside emacs)!
#+begin_src emacs-lisp
  (setq ispell-program-name "/usr/local/bin/aspell")
  (add-to-list 'ispell-skip-region-alist '("^#+BEGIN_SRC" . "^#+END_SRC"))
#+end_src
** gptel
https://github.com/karthink/gptel
 #+begin_src emacs-lisp
   (require 'auth-source)
   (defun pb/get-anthropic-api-key ()
     "Retrieve the API key for api.anthropic.com from .authinfo."
     (require 'auth-source)
     (let ((secret (plist-get (nth 0 (auth-source-search :host "api.anthropic.com"))
          :secret)))
       (if secret
       secret
     (error "No API key found for api.anthropic.com in .authinfo"))))

   (use-package gptel
     :straight (:host github :repo "karthink/gptel")

     :custom
     (gptel-model "gpt-4o")
     (gptel-make-anthropic "Claude" :stream t :key (pb/get-anthropic-api-key))
     ;; (gptel-model "claude-3-haiku-20240307") ; "claude-3-opus|sonnet-20240229" also available
     ;; :config
     ;; (add-hook 'gptel-post-response-functions 'gptel-end-of-response)
     )

   (defun my-straight-pull-package (package)
     "Pull the latest version of PACKAGE from its remote repository."
     (message "'straight-pull-package' for gptel.")
     (straight-pull-package package)
     )

   (add-hook 'emacs-startup-hook (lambda () (my-straight-pull-package 'gptel)))

 #+end_src
** postgresql
#+begin_src emacs-lisp
  (setq sql-postgres-program "/Applications/Postgres.app/Contents/Versions/latest/bin/psql")
  (add-hook 'sql-mode-hook 'sql-highlight-postgres-keywords)
  (add-hook 'sql-interactive-mode-hook 'sql-rename-buffer)

  ;; Execute this after opening up SQL to get a scratch
  ;; buffer from which to submit sql with C-c C-b
  (defun pgsql-scratch ()
    (interactive)
    (switch-to-buffer "*scratch*")
    (sql-mode)
    (sql-set-product "postgres")
    (sql-set-sqli-buffer)
    (sql-rename-buffer)
    )

  (defun upcase-sql-keywords ()
    (interactive)
    (save-excursion
      (dolist (keywords sql-mode-postgres-font-lock-keywords)
    (goto-char (point-min))
    (while (re-search-forward (car keywords) nil t)
      (goto-char (+ 1 (match-beginning 0)))
      (when (eql font-lock-keyword-face (face-at-point))
    (backward-char)
    (upcase-word 1)
    (forward-char))))))

  (setq sql-connection-alist
      '(
    (foo
    (sql-product 'postgres)
    (sql-port 5432)
    (sql-server "localhost")
    (sql-user "--sorry, getme from environment--")
    (sql-password "--sorry, getme from environment also--")
    (sql-database "db-foo"))
       )
      )

  (defun wrapper-sql-connect (product connection)
    (setq sql-product product)
    (sql-connect connection))

  ; Startup wrappers
  (defun sql-environment-foo ()
    (interactive)
    (wrapper-sql-connect 'postgres 'foo))
#+end_src
** prodigy
[[https://www.jds.work/emacs-prodigy/][Managing Local Services in Emacs with Prodigy | JDs Work]] ([[https://github.com/rejeep/prodigy.el][GitHub - rejeep/prodigy.el]])
#+begin_src emacs-lisp
  (use-package prodigy
    :defer 1
    )

  (prodigy-define-service
    :name          "OptimusLudos-Server-LocalDatabase"
    :cwd           "~/Repository/10-19 Development/10 Development/10.01 optimus_ludos"
    :command       "~/.local/bin/poe"
    :args          '("dev_run_local")
    :ready-message "Ready..."
    )

  (prodigy-define-service
    :name          "OptimusLudos-Server-ProductionDatabase"
    :cwd           "~/Repository/10-19 Development/10 Development/10.01 optimus_ludos"
    :command       "~/.local/bin/poe"
    :args          '("dev_run_production")
    :ready-message "Ready..."
    )

  (prodigy-define-service
    :name          "CoctioniLibri-Server-LocalDatabase"
    :cwd           "~/Repository/10-19 Development/10 Development/10.23 coctione_libri"
    :command       "~/.local/bin/poe"
    :args          '("dev_run_local")
    :ready-message "Ready..."
    )

  (prodigy-define-service
    :name          "CoctioniLibri-Server-ProductionDatabase"
    :cwd           "~/Repository/10-19 Development/10 Development/10.23 coctione_libri"
    :command       "~/.local/bin/poe"
    :args          '("dev_run_production")
    :ready-message "Ready..."
    )

  (prodigy-define-service
    :name          "HealthActivityDashboard-Shiny"
    :cwd           "~/Repository/10-19 Development/10 Development/10.06 health-activity-dashboard/dashboard-shiny"
    :command       "~/.local/bin/poe"
    :args          '("run")
    :ready-message "Ready..."
    )
#+end_src
** ripgrep/rg
Usage reminder: Use ~wgrep-save-all-buffers~ to save once changes have been committed after editing rg results buffer.
#+begin_src emacs-lisp
  (use-package rg
    :defer 1

    :config
    (rg-enable-menu)
    )
#+end_src
** shell
#+begin_src emacs-lisp
  (setq explicit-shell-file-name "/usr/local/bin/fish")
  (setq shell-pushd-regexp "push[d]*")
  (setq shell-popd-regexp   "pop[d]*")

  ;; Make git work within shell
  (setenv "PAGER"  "/bin/cat")
  (setenv "EDITOR" "/Applications/Emacs.app/Contents/MacOS/bin/emacsclient")
#+end_src
** vterm
Usage reminder: ~C-c C-t~ to place terminal into "buffer" mode obo copy/paste operations.
 #+begin_src emacs-lisp
   (use-package vterm
     :defer t
     :config
     (setq vterm-shell "/usr/local/bin/fish")
     :hook
     ((vterm-mode . (lambda () (setq-local show-trailing-whitespace nil)))
      (vterm-mode . vterm-custom-font-size))
     :custom
     (vterm-always-compile-module t))

   (defun vterm-custom-font-size()
     "Sue me...I like to see more text in my terminal windows."
     (setq buffer-face-mode-face '(:weight light :height 180))
     (buffer-face-mode))

   (defun pb/vterm-current-directory ()
     "Create a terminal buffer from the current directory."
     (interactive)
     (let ((shell-name (car (last (butlast (split-string default-directory "/"))))))
       (vterm (concat "@" shell-name))
       )
     )

   (defun pb/vterm-by-name ()
     "Create a terminal buffer based on name provided."
     (interactive)
     (let ((shell-name (read-string "Shell name: ")))
       (vterm (concat "@" shell-name))
       )
     )
#+end_src
* Custom Commands
These are custom commands I used on regular basis (almost all of which are cribbed from others, credit given as much as possible!). Listed in no particular order:
** Change case of text
[[http://ergoemacs.org/emacs/modernization_upcase-word.html]]
#+begin_src emacs-lisp
  (defun pb/toggle-letter-case ()
    "Toggle the letter case of current word or text selection, toggles between: “all lower”, “Init Caps”, “ALL CAPS”."
    (interactive)
    (let (p1 p2 (deactivate-mark nil) (case-fold-search nil))
      (if (region-active-p)
      (setq p1 (region-beginning) p2 (region-end))
    (let ((bds (bounds-of-thing-at-point 'word) ) )
      (setq p1 (car bds) p2 (cdr bds)) ) )

      (when (not (eq last-command this-command))
    (save-excursion
      (goto-char p1)
      (cond
       ((looking-at "[[:lower:]][[:lower:]]") (put this-command 'state "all lower"))
       ((looking-at "[[:upper:]][[:upper:]]") (put this-command 'state "all caps") )
       ((looking-at "[[:upper:]][[:lower:]]") (put this-command 'state "init caps") )
       ((looking-at "[[:lower:]]") (put this-command 'state "all lower"))
       ((looking-at "[[:upper:]]") (put this-command 'state "all caps") )
       (t (put this-command 'state "all lower") ) ) )
    )

      (cond
       ((string= "all lower" (get this-command 'state))
    (upcase-initials-region p1 p2) (put this-command 'state "init caps"))
       ((string= "init caps" (get this-command 'state))
    (upcase-region p1 p2) (put this-command 'state "all caps"))
       ((string= "all caps" (get this-command 'state))
    (downcase-region p1 p2) (put this-command 'state "all lower")) )
      )
    )

  ;; Turn these off so they don't interfere with our custom method
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region   'disabled nil)

  (global-set-key (kbd "M-l") 'pb/toggle-letter-case) ;; Overrides existing mapping
#+end_src
** Ctrl-a behaviour enhancement
Ctrl-a goes to *logical beginning* of line first before a second invocation takes point to *physical* beginning.
#+begin_src emacs-lisp
  (defun pb/key-back-to-indentation-or-beginning ()
    (interactive)
    (if (= (point) (progn (back-to-indentation) (point)))
    (beginning-of-line)))
  (global-set-key (kbd "C-a") 'pb/key-back-to-indentation-or-beginning)
#+end_src
** Smarter C-w (backward word kill)
[[https://github.com/magnars/.emacs.d/blob/master/defuns/editing-defuns.el]]
#+begin_src emacs-lisp
  ;; Here's a better C-w (kill region if active, otherwise kill backward word)
  (defun pb/kill-region-or-backward-word ()
    (interactive)
    (if (region-active-p)
    (kill-region (region-beginning) (region-end))
      (backward-kill-word 1)))
  (global-set-key (kbd "C-w") (lambda () (interactive) (pb/kill-region-or-backward-word)))
#+end_src
** Better mark-word
[[https://www.emacs.dyerdwelling.family/emacs/20231209092556-emacs--redefining-mark-paragraph-and-mark-word/]]
#+begin_src emacs-lisp
  (defun pb/mark-word()
    "redefinition of mark-word"
    (interactive)
    (if (not (looking-at "\\<"))
      (backward-word))
    (push-mark)
    (forward-word)
    (setq mark-active t))

  ;; Override existing keymapping
  (global-set-key (kbd "M-@") 'pb/mark-word)
#+end_src
** Toggle window split
https://macowners.club/posts/custom-functions-5-navigation/
#+begin_src emacs-lisp
  (defun pb/toggle-split-direction ()
    "Toggle window split from vertical to horizontal or vice-versa.
     Credit: https://github.com/olivertaylor/dotfiles/blob/master/emacs/init.el"
    (interactive)
    (if (> (length (window-list)) 2)
    (error "Sorry, can only toggle split direction with 2 windows.")
      (let ((was-full-height (window-full-height-p)))
    (delete-other-windows)
    (if was-full-height
    (split-window-vertically)
      (split-window-horizontally))
    (save-selected-window
      (other-window 1)
      (switch-to-buffer (other-buffer)))))
    )

  (global-set-key (kbd "C-x O") 'pb/toggle-split-direction)
#+end_src
** Kill this buffer
[[http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/]]
#+begin_src emacs-lisp
  ;; Kill *this* buffer
  (defun pb/-kill-this-buffer- ()
    "Kill the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'pb/-kill-this-buffer-)
#+end_src
** Use project-file-find instead of file-find:
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-f")   (lambda () (interactive) (project-find-file)))
  (global-set-key (kbd "C-x C-S-f") (lambda () (interactive) (find-file)))
#+end_src
** Scroll page without moving cursor
#+begin_src emacs-lisp
  (global-set-key "\M-n" (lambda () (interactive) (scroll-up 12)))
  (global-set-key "\M-p" (lambda () (interactive) (scroll-down 12)))
#+end_src
** Smarter open line
 [[http://emacsredux.com/blog/2013/03/26/smarter-open-line/]]
#+begin_src emacs-lisp
  (defun pb/key-smart-open-line ()
    "Insert an empty line after the current line. Position the cursor
  at its beginning, according to the current mode."
    (interactive)
    (move-end-of-line nil)
    (newline-and-indent))

  (defun pb/key-smart-open-line-above ()
    "Insert an empty line above the current line. Position the cursor
  at it's beginning, according to the current mode."
    (interactive)

    (move-beginning-of-line nil)
    (newline-and-indent)
    (forward-line -1)
    (indent-according-to-mode))

  (global-set-key (kbd "M-o") 'pb/key-smart-open-line)
  (global-set-key (kbd "M-O") 'pb/key-smart-open-line-above)
#+end_src
** Split current frame into evenly balanced "3"
#+begin_src emacs-lisp
  (fset 'pb/split3 (kmacro-lambda-form [?\C-x ?1 ?\C-x ?3 ?\C-x ?3 ?\C-x ?+] 0 "%d"))
#+end_src
** Text/Font scaling interactively
[[https://www.reddit.com/r/emacs/comments/ck4k2u/forgot_my_glasses/?utm_source=share&utm_medium=ios_app]]
#+begin_src emacs-lisp
  (defun set-font-everywhere (font-spec &optional all-frames)
    (when (null (assq 'font default-frame-alist))
      (add-to-list 'default-frame-alist '(font . "")))

    (setcdr (assq 'font default-frame-alist) font-spec)

    (dolist (f (if all-frames (frame-list) (list (selected-frame))))
      (with-selected-frame f (set-frame-font font-spec t))))

  (defun resize-font(font &optional n)
    (let* ((ff (split-string font "-"))
       (size (nth 7 ff))
       (sizen (string-to-number size))
       (n (or n 1))
       (new-size (max 1 (+ n sizen))))
      (setcar (nthcdr 7 ff) (number-to-string new-size))
      (cons (mapconcat 'identity ff "-") new-size)))

  (defun cur-font ()
    (cdr (assq 'font (frame-parameters (selected-frame)))))

  (defvar min-font-size 1)
  (defun change-font-size (&optional decrease times)
    (let* ((inc (* (or times 1) (if decrease -1 1)))
       (old-font (cur-font))
       (new-font-and-size (resize-font old-font inc))
       (new-font (car new-font-and-size))
       (size (cdr new-font-and-size)))
      (unless (equal old-font new-font)
    (set-font-everywhere new-font)
    (message (format "%d %s" size new-font)))))
  (defun increase-font-size(&optional n) (interactive) (change-font-size nil n))
  (defun decrease-font-size(&optional n) (interactive) (change-font-size t n))

  (define-key global-map (kbd "C-+") 'increase-font-size)
  (define-key global-map (kbd "C--") 'decrease-font-size)

#+end_src
** Use Insert key to toggle overwrite/insert
[[https://emacs.stackexchange.com/questions/18533/how-to-use-the-insert-key-to-toggle-overwrite-mode-when-using-a-pc-keyboard-in]]
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    ;; when using Windows keyboard on Mac, the insert key is mapped to <help>
    ;; copy ctrl-insert, paste shift-insert on windows keyboard
    (global-set-key [C-help] #'clipboard-kill-ring-save)
    (global-set-key [S-help] #'clipboard-yank)

    ;; insert to toggle `overwrite-mode'
    (global-set-key [help] #'overwrite-mode))
#+end_src
* Startup
Stuff we do these after everything else has been setup so we have commands available for key-mappings
** Function Key Mappings
Some of these are baked into my fingers from more than three decades (anymore remember SPF on IBM Mainframes or the Brief editor on the
first IBM PC's?)...thus, we won't be changing these often.
#+begin_src emacs-lisp
  (global-set-key (kbd "<f1>") 'goto-line)
  (global-set-key (kbd "<f2>") 'toggle-truncate-lines)
  (global-set-key (kbd "<f3>") 'align-regexp)

  ;; <f4> still available!

  (global-set-key (kbd   "<f5>") 'rg-project) ;; This one only works on selected text BUT doesn't prompt for directory or file type!
  (global-set-key (kbd "C-<f5>") 'rg-literal) ;; While this one prompts for something to query on but also asks for directory and type as well..

  (global-set-key (kbd   "<f6>") 'anzu-query-replace)
  (global-set-key (kbd "C-<f6>") 'anzu-query-replace-regexp)

  (global-set-key (kbd "<f7>") 'kmacro-start-macro) ; Keyboard macro shortcuts
  (global-set-key (kbd "<f8>") 'kmacro-end-macro)
  (global-set-key (kbd "<f9>") 'call-last-kbd-macro)

  ;; <f10> still available! (but has an existing emacs assignment)

  ;; <f11> still available! (but used by MacOS to hide all windows and display desktop.)

  (global-set-key (kbd   "<f12>") 'pb/vterm-current-directory)
  (global-set-key (kbd "C-<f12>") 'pb/vterm-by-name)
#+end_src
** Files to have open when we start
"Yes Ken, what IS the [[https://johnnydecimal.com/][Johny Decimal System]] for a thousand..."
#+begin_src emacs-lisp
  ;; (find-file "~/Repository/00-09 System/01 Org/reference/python.org")
  ;; (find-file "~/Repository/00-09 System/01 Org/history.org")
  ;; (find-file "~/Repository/00-09 System/01 Org/journal.org")
  ;; (find-file "~/Repository/00-09 System/01 Org/gtd.org")
  ;; (find-file "~/.emacs.d/config.org")

  ;; Start with this displayed on startup:
  ;; (find-file "~/Repository/00-09 System/01 Org/projects.org")
#+end_src
** Display startup time:
#+begin_src emacs-lisp
  (message "Emacs startup time: %s" (emacs-init-time))
#+end_src
* COMMENT History (for sh_ts and giggles)
|------------+-------------------------------------------------------------------|
| 1990.07.13 | Make Systems (on Sunview).                                        |
| 1991.06.07 | Teknekron (X using twm).                                          |
| 1993.12.08 | Teknekron (emacs version 19).                                     |
| 1994.03.26 | Added tcl initialisation logic.                                   |
| 2006.01.08 | First real cleanup since the mid-90's (!).                        |
| 2006.10.02 | Configured into AXA Rosenberg.                                    |
| 2008.01.19 | Update/cleanup, addition of ECB, OrgMode.                         |
| 2011.04.15 | Added multiplatform support for Ubuntu & MacOS.                   |
| 2011.09.05 | Updated OrgMode for another attempt at GTD.                       |
| 2011.09.05 | Final tweaks obo EnergySolutions environment.                     |
| 2012.08.15 | Added support for Ropemacs & Pymacs for python IDE.               |
| 2012.08.28 | Added support for GRIN integration.                               |
| 2013.05.12 | Declaring dotemacs-bankruptcy! Moving to site-start architecture. |
| 2020.06.10 | Test and discard of lsp, rebuilt venv for elpy (~/emacs-venv)     |
| 2021.01.04 | Clean up of emacs folders.                                        |
| 2021.11.28 | Moved to PARA file organisation for all main directories.         |
| 2022.03.15 | Moved to support numbered file repository structure.              |
| 2022.11.21 | Part of emacs bankruptcy and move to clean use-package approach.  |
| 2024.03.02 | Cleanup of old/unused packages and store archived "history".      |
|------------+-------------------------------------------------------------------|
* COMMENT ARCHIVED
These are here so I don't waste time in the future trying to use 'em *again*.
** afterglow
[[https://github.com/ernstvanderlinden/emacs-afterglow/tree/8254dc5d4fdfec63e1b5b2d59af0771d2c5a5474][GitHub - ernstvanderlinden/emacs-afterglow at 8254dc5d4fdfec63e1b5b2d59af0771...]]
#+begin_src emacs-lisp
  (use-package afterglow
    :config
    (afterglow-mode t)
    ;; Optional customizations
    (setq afterglow-default-duration 1.0)
    (setq afterglow-default-face 'hl-line)
    ;; Add triggers as needed
    (afterglow-add-triggers
     '((previous-line     :thing line   :duration 0.2)
       (next-line         :thing line   :duration 0.2)
       (eval-buffer       :thing window :duration 0.2)
       (eval-defun        :thing defun  :duration 0.2)
       (eval-expression   :thing sexp   :duration 1)
       (eval-last-sexp    :thing sexp   :duration 1)
       (my-function       :thing my-region-function :duration 0.5 :face 'highlight))))
#+end_src
** buffer-management
[[https://github.com/alphapapa/bufler.el][GitHub - alphapapa/bufler.el: A butler for your buffers. Group buffers into w...]]
Verdict: too "busy" with many different projects' files open. Easier to simply "s f" in ibuffer to group by path if desired.
#+begin_src emacs-lisp
  (use-package bufler
    :defer t
    )
#+end_src
** dashboard (from the "dashboard" package)
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (setq dashboard-banner-logo-title "Good Morning Mr. Phelps..."
          dashboard-center-content            t           ;; Content is not centered by default, we want it to be.
          dashboard-vertically-center-content t           ;; Vertically center content.
          dashboard-display-icons-p           t           ;; Display icons on both GUI and terminal
          dashboard-icon-type                 'nerd-icons ;; Use `nerd-icons' package
    )
    (setq dashboard-items '((recents . 15)))
    (setq dashboard-startupify-list '(dashboard-insert-banner
                                      dashboard-insert-newline
                                      dashboard-insert-banner-title
                                      dashboard-insert-newline
                                      dashboard-insert-navigator
                                      dashboard-insert-newline
                                      dashboard-insert-init-info
                                      dashboard-insert-items)) ;; Default EXCEPT we don't want the footer.
    (dashboard-setup-startup-hook)
    )
#+end_src
** editorconfig
"EditorConfig helps maintain consistent coding styles for multiple developers working on the same project across various editors and IDEs."
However, I don't work with "multiple developers" much anymore, not necessary!
[[https://editorconfig.org/][EditorConfig]]
#+begin_src emacs-lisp
  (use-package editorconfig
    :init
    (editorconfig-mode 1)
    )
#+end_src
** elm-mode
On hiatus until/if I get back to doing elm development
https://github.com/jcollard/elm-mode
#+begin_src emacs-lisp
  (use-package elm-mode
    :config
    (setq elm-format-on-save t)

    :init
    (add-hook 'elm-mode-hook 'elm-format-on-save-mode)
    )
#+end_src
** find-file-in-project
~project-find-file~ works fine, no need to ffip for me.
** lin
[[https://elpa.gnu.org/packages/lin.html][GNU ELPA - lin]] (Prot)
#+begin_src emacs-lisp
  (use-package lin
    ;; :ensure t
    :config
    (lin-global-mode 1)
    )
#+end_src
** mode-lines
Tried and discarded for one reason or another.
*** telephone-line
*** [[https://github.com/TheBB/spaceline][spaceline]]
[[https://github.com/TheBB/spaceline#turning-segments-on-and-off][GitHub - TheBB/spaceline: Powerline theme from Spacemacs]]
#+begin_src emacs-lisp
  (use-package spaceline
    :disabled
    :init
    (spaceline-emacs-theme)
    :config
    (spaceline-toggle-minor-modes-off)
    )
#+end_src
*** [[https://github.com/Malabarba/smart-mode-line/][smart-mode-line]]
#+begin_src emacs-lisp
  (use-package smart-mode-line
    :disabled
    ;; :ensure t
    :init
    (sml/setup)
    )
#+end_src
*** [[https://github.com/seagle0128/doom-modeline?tab=readme-ov-file#customize][doom]]
[[https://github.com/seagle0128/doom-modeline][GitHub - seagle0128/doom-modeline: A fancy and fast mode-line inspired by min...]]
http://emacs.stackexchange.com/questions/13227/easy-way-to-give-the-time-its-own-face-in-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :disabled
    ;; :ensure t

    :init
    (setq
     display-time-string-forms '((propertize (format-time-string "%a %R %F" now)))
     doom-modeline-column-zero-based nil
     doom-modeline-height 1

     doom-modeline-position-column-format '("C%c")
     doom-modeline-position-column-line-format '("%l - %c")
     doom-modeline-position-line-format '("L%l")
     doom-modeline-vcs-max-length 20

     modeline-position-column-format '("C%c")
     modeline-position-column-line-format '("%l - %c")
     modeline-position-line-format '("L%l")

     inhibit-compacting-font-caches t
     nerd-icons-scale-factor 1.0
     )
    (custom-set-faces
     '(mode-line-active   ((t (:family "SauceCodePro Nerd Font Mono" :height 1.0))))
     '(mode-line-inactive ((t (:family "SauceCodePro Nerd Font Mono" :height 0.8))))
     )

    :hook
    (after-init . doom-modeline-mode)
    )
#+end_src
** move-text
#+begin_src emacs-lisp
  (use-package move-text
    :init
    (move-text-default-bindings)
    )
#+end_src
** org-modern-indent
 #+begin_src emacs-lisp
   (use-package org-modern-indent
     :straight (org-modern-indent :type git :host github :repo "jdtsmith/org-modern-indent")
     :config
     (add-hook 'org-mode-hook #'org-modern-indent-mode 128)
   )
 #+end_src
** outli
Never could get this to work :-(
#+begin_src emacs-lisp
  (use-package outli
    :straight (outli :type git :host github :repo "jdtsmith/outli")
    :bind
    (:map outli-mode-map ; convenience key to get back to containing heading
      ("C-c C-p" . (lambda () (interactive) (outline-back-to-heading))))
    :custom (outli-heading-config '((python-mode     "## " ?* nil nil)
            (emacs-lisp-mode ";; " ?* nil nil)
            ))
    :hook ((prog-mode python-mode text-mode) . outli-mode)
    )
#+end_src
** page-break-lines
[[https://github.com/purcell/page-break-lines][Display a nice line for ^L's.]]
#+begin_src emacs-lisp
  (use-package page-break-lines
    :init (global-page-break-lines-mode))
#+end_src
** python (pet)
As of now, not sure when this would be necessary, everything *I* need to do works!
[[https://github.com/wyuenho/emacs-pet][GitHub - wyuenho/emacs-pet: Tracks down the correct Python tooling executable...]]
** substitute
https://protesilaos.com/emacs/substitute
#+begin_src emacs-lisp
  (use-package substitute
    :config
    (require 'substitute)
    (add-hook 'substitute-post-replace-functions #'substitute-report-operation)

    :bind (("M-<f6>" . substitute-target-in-buffer))
    )
#+end_src
** theme: modus-operandi
#+begin_src emacs-lisp
  (use-package modus-themes
    ;; :ensure t
    :config
    ;;
    ;; Use Prot's own configuration:
    ;; https://protesilaos.com/emacs/modus-themes#h:aabcada6-810d-4eee-b34a-d2a9c301824d
    ;;
    (setq modus-themes-custom-auto-reload nil
      modus-themes-to-toggle '(modus-operandi modus-vivendi)
      modus-themes-mixed-fonts t
      modus-themes-variable-pitch-ui nil
      modus-themes-italic-constructs t
      modus-themes-bold-constructs t
      modus-themes-org-blocks 'gray-background
      modus-themes-completions '((t . (extrabold)))
      modus-themes-prompts nil
      )

    (setq modus-themes-common-palette-overrides
      '((cursor magenta-cooler)

    ;; Make the fringe invisible.
    (fringe unspecified)

    ;; Make line numbers less intense and add a shade of cyan
    ;; for the current line number.
    (fg-line-number-inactive "gray50")
    (fg-line-number-active cyan-cooler)
    (bg-line-number-inactive unspecified)
    (bg-line-number-active unspecified)

    ;; Make the current line of `hl-line-mode' a fine shade of
    ;; gray (though also see my `lin' package).
    (bg-hl-line bg-dim)

    ;; Make the region have a cyan-green background with no
    ;; specific foreground (use foreground of underlying text).
    ;; "bg-sage" refers to Salvia officinalis, else the common
    ;; sage.
    (bg-region bg-sage)
    (fg-region unspecified)

    ;; Make matching parentheses a shade of magenta.  It
    ;; complements the region nicely.
    (bg-paren-match bg-magenta-intense)

    ;; Make email citations faint and neutral, reducing the
    ;; default four colors to two; make mail headers cyan-blue.
    (mail-cite-0 fg-dim)
    (mail-cite-1 blue-faint)
    (mail-cite-2 fg-dim)
    (mail-cite-3 blue-faint)
    (mail-part cyan-warmer)
    (mail-recipient blue-warmer)
    (mail-subject magenta-cooler)
    (mail-other cyan-warmer)

    ;; Change dates to a set of more subtle combinations.
    (date-deadline magenta-cooler)
    (date-scheduled magenta)
    (date-weekday fg-main)
    (date-event fg-dim)
    (date-now blue-faint)

    ;; Make tags (Org) less colorful and tables look the same as
    ;; the default foreground.
    (prose-done cyan-cooler)
    (prose-tag fg-dim)
    (prose-table fg-main)

    ;; Make headings less colorful (though I never use deeply
    ;; nested headings).
    (fg-heading-2 blue-faint)
    (fg-heading-3 magenta-faint)
    (fg-heading-4 blue-faint)
    (fg-heading-5 magenta-faint)
    (fg-heading-6 blue-faint)
    (fg-heading-7 magenta-faint)
    (fg-heading-8 blue-faint)

    ;; Make the active mode line a fine shade of lavender
    ;; (purple) and tone down the gray of the inactive mode
    ;; lines.
    (bg-mode-line-active bg-lavender)
    (border-mode-line-active bg-lavender)
    (bg-mode-line-inactive bg-dim)
    (border-mode-line-inactive bg-inactive)

    ;; Make the prompts a shade of magenta, to fit in nicely with
    ;; the overall blue-cyan-purple style of the other overrides.
    ;; Add a nuanced background as well.
    (bg-prompt bg-magenta-nuanced)
    (fg-prompt magenta-cooler)

    ;; Tweak some more constructs for stylistic constistency.
    (name blue-warmer)
    (identifier magenta-faint)
    (keybind magenta-cooler)
    (accent-0 magenta-cooler)
    (accent-1 cyan-cooler)
    (accent-2 blue-warmer)
    (accent-3 red-cooler)
    )
      )

    ;; Make the active mode line have a pseudo 3D effect (this assumes
    ;; you are using the default mode line and not an extra package).
    (custom-set-faces
     '(mode-line ((t :box (:style released-button)))))

    (load-theme 'modus-operandi)
    )
#+end_src
** theme: monokai
#+begin_src emacs-lisp
  (use-package monokai
    ;; :ensure nil
    :config
    (setq monokai-height-plus-4 1.2
      monokai-height-plus-3 1.1
     )
    (load-theme 'monokai nil)
  )
#+end_src
** theme: [[https://protesilaos.com/emacs/ef-themes][ef-autumn]] (prot)
#+begin_src emacs-lisp
  (use-package ef-themes
    ;; :ensure nil
    :config
    (setq ef-themes-italic-constructs t
      ef-themes-bold-constructs nil)
    (setq ef-themes-headings
      '((0 . (0.8))			;; Document titles etc.
    (1 . (1.2))
    (2 . (1.1))))
    (setq ef-themes-common-palette-overrides
      '((fg-heading-1 blue)
    (fg-heading-2 cyan)
    (fg-heading-3 green)))
    (load-theme 'ef-autumn)
  )
#+end_src
** ws-butler
#+begin_src emacs-lisp
  (use-package ws-butler
    :config
    (ws-butler-global-mode 1)
  )
#+end_src
