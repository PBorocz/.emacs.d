* Personal Information
#+begin_src emacs-lisp
  (setq
   user-full-name "Peter Borocz"
   user-mail-address (getenv "EMAIL_ADDRESS")
   )
#+end_src
* Basic Configuration
#+begin_src emacs-lisp
  (setq
     auto-save-default                      nil       ; Stop creating #autosave# files
     blink-cursor-interval                  0.3       ; Default is 0.5
     create-lockfiles                       nil       ; We don’t need lockfiles since were ONLY single-user!
     default-directory                      (concat (getenv  "HOME") "/")
     font-lock-maximum-decoration           t
     inhibit-compacting-font-caches         t         ; https://github.com/sabof/org-bullets/issues/11#issuecomment-439228372
     inhibit-default-init                   t
     inhibit-splash-screen                  t
     initial-scratch-message                nil       ; Start scratch buffers empty..
     make-backup-files                      nil       ; Stop creating backup~ files
     ring-bell-function                     'ignore
     search-highlight                       t
     sentence-end-double-space              nil       ; Period single space ends sentence
     switch-to-buffer-obey-display-actions  t         ; https://www.masteringemacs.org/article/demystifying-emacs-window-manager Switching Buffers
     uniquify-buffer-name-style             'forward  ; https://github.com/bbatsov/prelude
     uniquify-separator                     "/"
     uniquify-after-kill-buffer-p           t         ; Rename after killing uniquified
     uniquify-ignore-buffers-re             "^\\*"    ; Don't muck with special buffers
     vc-follow-symlinks                     t         ; https://stackoverflow.com/questions/15390178/emacs-and-symbolic-links#15391387
     visible-bell                           t
     word-wrap                              nil
     )

  ;; Define all aliases
  (defalias 'list-buffers 'ibuffer)  ; Use ibuffer default for all buffer management

  ;; Setup defaults across all buffers:
  (setq-default fill-column               96
                frame-title-format        '("%f [%m]")
                indent-tabs-mode          nil ; Make sure spaces are used when indenting anything!
                truncate-lines            t   ; Start out with NO line truncation.
                yank-excluded-properties 't   ; Clipboard yank is pasting graphics from microsoft instead of text. Strip all properties!
   )

  ;; We want y or n to be sufficient for yes/no prompts.
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Don't let Emacs suspend by getting rid of pesky "\C-z" and "\C-x\C-z" annoying minimize
  (unbind-key "C-z")
  (unbind-key "M-z")

  ;; abbrev-mode for typo corrections *AND* code shortcuts (/instead/ of yasnippets)
  (setq abbrev-file-name "~/.emacs.d/.abbrev_defs")
  (setq save-abbrevs 'silent) ;; save abbrevs when files are saved
  (setq abbrev-mode t)        ;; abbrev-mode everywhere to address common typos.

  (global-auto-revert-mode)   ;; refresh a buffer if changed on disk
#+end_src
* Local Tools
  These require a local installation (ie. outside emacs)
** aspell
   Live spell checking
#+begin_src emacs-lisp
  (setq ispell-program-name "/usr/local/bin/aspell")
  (add-to-list 'ispell-skip-region-alist '("^#+BEGIN_SRC" . "^#+END_SRC"))
#+end_src
* Packages
** /"built-ins"/
#+begin_src emacs-lisp
  (use-package paren
    :ensure nil
    :init
    (setq show-paren-delay 0)  ; We want matching parens to show immediately
    :config
    (show-paren-mode t))

  (use-package time
    :ensure nil
    :init
    (setq display-time-day-and-date  t
          display-time-24hr-format   t
          display-time-use-mail-icon t
          display-time-interval      10)
    :config
    (display-time))
#+end_src
** anzu
Highlight global-search-replace strings dynamically.
#+begin_src emacs-lisp
  (use-package anzu
    :config
    (global-anzu-mode)
    )
  (global-set-key (kbd   "<f6>") 'anzu-query-replace)
  (global-set-key (kbd "C-<f6>") 'anzu-query-replace-regexp)
#+end_src
** company
   [[Https://emacs.stackexchange.com/questions/13286/how-can-i-stop-the-enter-key-from-triggering-a-completion-in-company-mode][How can I stop the enter key from triggering a completion in company mode?]]
   #+begin_src emacs-lisp
     (use-package company
       :delight company-mode  ;; Turns off the listing of company mode in list of minor modes (e.g. modeline)
       :demand t
       :init
       (setq company-idle-delay 0.1
             company-minimum-prefix-length 1)
       :bind (:map company-active-map
              ("C-n" . company-select-next)
              ("C-p" . company-select-previous))
       :config
       (global-company-mode))
#+end_src
** css
#+begin_src emacs-lisp
  (use-package css-mode
    :custom
    (css-indent-offset 2))
#+end_src
** csv
#+begin_src emacs-lisp
 (use-package csv-mode
   :init
   (add-to-list 'auto-mode-alist '("\\*.csv$" . csv-mode))
   (add-to-list 'auto-mode-alist '("\\*.tsv$" . csv-mode))
 )
#+end_src
** dired
*** Base Package
[[https://github.com/MatthewZMD/.emacs.d]]
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil

    :bind
    (("C-x C-d" . dired-jump)
     ("C-x j"   . dired-jump-other-window)

     ;; Make "e" act the same in dired as it does in rg/grep, ie. make the buffer editable (C-c C-s to save edits)
     (:map dired-mode-map
           ("e" . dired-toggle-read-only)
           ("." . dired-up-directory)
           )
     )

    :config
    (progn
      (setq auto-revert-verbose                 nil ;; Auto refresh Dired, but be quiet about it
            delete-by-moving-to-trash           t
            dired-dwim-target                   t
            dired-hide-details-mode             nil
            dired-listing-switches              "-la"
            dired-recursive-copies              'always
            dired-recursive-deletes             'always
            global-auto-revert-non-file-buffers t
            wdired-allow-to-change-permissions  t
            )
      )
    )

  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil))
#+end_src
*** Supplemental
#+begin_src emacs-lisp
  ;;
  ;; Sort dired listings with directories first
  ;; https://www.emacswiki.org/emacs/DiredSortDirectoriesFirst
  ;;
  (defun mydired-sort ()
    (save-excursion
      (let (buffer-read-only)
        (forward-line 2) ;; beyond dir. header
        (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
      (set-buffer-modified-p nil)))

  (defadvice dired-readin
    (after dired-after-updating-hook first () activate)
    "Sort dired listings with directories first before adding marks."
    (mydired-sort))

  ;;
  ;; Color our dired display by type of file/directory
  ;; https://github.com/purcell/diredfl
  ;;
  (add-hook 'dired-mode-hook 'diredfl-mode)
#+end_src
** doom-modeline
[[https://github.com/seagle0128/doom-modeline][GitHub - seagle0128/doom-modeline: A fancy and fast mode-line inspired by min...]]
http://www.emacswiki.org/emacs/DisplayTime
http://emacs.stackexchange.com/questions/13227/easy-way-to-give-the-time-its-own-face-in-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init
    (setq doom-modeline-vcs-max-length 20
          display-time-string-forms '((propertize (format-time-string "%F %R" now))))
    :hook
    (after-init         . doom-modeline-mode)
    (doom-modeline-mode . display-battery-mode)
    :config
    (custom-set-faces '(mode-line          ((t (:family "SF Mono" :height 0.80)))))
    (custom-set-faces '(mode-line-inactive ((t (:family "SF Mono" :height 0.60)))))
    )
#+end_src
** editor-config
#+begin_src emacs-lisp
  (use-package editorconfig
    :init
    (editorconfig-mode 1)
    )
#+end_src
** eglot
   - [[https://github.com/joaotavora/eglot][GitHub - joaotavora/eglot: A client for Language Server Protocol servers]]
   - [[https://ddavis.io/posts/emacs-python-lsp/][Python with Emacs: py(v)env and lsp-mode]]
   - [[https://whatacold.io/blog/2022-01-22-emacs-eglot-lsp/][Eglot for better programming experience in Emacs - whatacold's space]]
#+begin_src emacs-lisp
  ;; https://grtcdr.tn/dotfiles/emacs/emacs.html#orgdb7d3a6
  (use-package eglot
      :commands (eglot eglot-ensure)
      :hook ((python-mode . eglot-ensure))
      :bind (:map eglot-mode-map
                  ("C-c e a" . eglot-code-actions)
                  ("C-c e r" . eglot-rename)
                  ("C-c e f" . eglot-format)
                  ("C-c x r" . xref-find-references)
                  ("C-c x f" . xref-find-definitions)
                  ("C-c x a" . xref-find-apropos)
                  ("C-c f n" . flymake-goto-next-error)
                  ("C-c f p" . flymake-goto-prev-error)
                  ("C-c f d" . flymake-show-project-diagnostics))
      :custom
      (eglot-autoshutdown t)
      (eglot-menu-string "eglot")
      (eglot-ignored-server-capabilities '(:documentHighlightProvider))
      )

  (use-package pyvenv-auto
    :custom
    (pyvenv-auto-mode t))

  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '(python-mode . ("ruff-lsp"))))
#+end_src
** elm-mode
   https://github.com/jcollard/elm-mode
#+begin_src emacs-lisp
  (use-package elm-mode
    :config
    (setq elm-format-on-save t)
    :init
    (add-hook 'elm-mode-hook 'elm-format-on-save-mode)
    )
#+end_src
** find-file-in-project
 #+begin_src emacs-lisp
   (use-package find-file-in-project
     :load-path "~/.emacs.d/site-lisp/find-file-in-project/"
     :config
     (setq ffip-use-rust-fd t)
     :bind
     ("C-c C-x C-f" . find-file-in-project) ;; Note: override org-emphasize (which I've never used)
     )
 #+end_src
** fish-shell-mode
#+begin_src emacs-lisp
  (use-package fish-mode)
#+end_src
** git
 #+begin_src emacs-lisp
   (use-package git-timemachine)

   (use-package git-gutter
     :init
     (global-git-gutter-mode +1))
 #+end_src
** graphviz/dot-mode
#+begin_src emacs-lisp
  (use-package graphviz-dot-mode
    :config
    (setq graphviz-dot-indent-width 4))
#+end_src
** helpful
Improve quality of most-used C-h methods.
#+begin_src emacs-lisp
  (use-package helpful
    :demand t
    :bind
    ("C-x C-g" . magit-status)

    ;; Note that the built-in `describe-function' includes both functions
    ;; and macros. `helpful-function' is functions only, so we provide
    ;; `helpful-callable' as a drop-in replacement.
    ("C-h f" . helpful-callable)
    ("C-h v" . helpful-variable)
    ("C-h k" . helpful-key)
    ("C-h x" . helpful-command)

    ;; I also recommend the following keybindings to get the most out of helpful:
    ;; Lookup the current symbol at point. C-c C-d is a common keybinding
    ;; for this in lisp modes.
    ("C-c C-d" . helpful-at-point)

    ;; Look up *F*unctions (excludes macros).
    ;;
    ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
    ;; already links to the manual, if a function is referenced there.
    ("C-h F"  . helpful-function)
    )

#+end_src
** hungry-deletes
Aggressively (but reluctantly) delete white-space.
#+begin_src emacs-lisp
  ;; https://github.com/hrehfeld/emacs-smart-hungry-delete
  (use-package smart-hungry-delete
    :ensure t
    :bind (([remap backward-delete-char-untabify] . smart-hungry-delete-backward-char)
                 ([remap delete-backward-char] . smart-hungry-delete-backward-char)
                 ([remap delete-char] . smart-hungry-delete-forward-char))
    :init (smart-hungry-delete-add-default-hooks))

  ;; This errors out on python-mode-map, trying the version above for now.
  ;; (use-package smart-hungry-delete
  ;;   :ensure t
  ;;   :bind (:map python-mode-map
  ;;               ([remap backward-delete-char-untabify] . smart-hungry-delete-backward-char)
  ;;               ([remap delete-backward-char] . smart-hungry-delete-backward-char)
  ;;               ([remap delete-char] . smart-hungry-delete-forward-char))
  ;;   :init (smart-hungry-delete-add-default-hooks))
  ;;
  ;; 2023-03-23 Replace with smart-hungry-delete (and only for python-mode) since
  ;; we've been getting a bit too many fubars hungy-delete within large .org files.
  ;;
  ;; (use-package hungry-delete
  ;;     :init
  ;;     (global-hungry-delete-mode)
  ;;     :config
  ;;     (setq hungry-delete-join-reluctantly 1))
#+end_src
** justfile
#+begin_src emacs-lisp
  (use-package just-mode
    :config
    (add-to-list 'auto-mode-alist '("\\justfile?\\'" . just-mode))
    )
#+end_src
** magit
#+begin_src emacs-lisp
  ;; Full screen magit-status
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))

  (defun magit-quit-session ()
    "Restores the previous window configuration and kills the magit buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen))

  (use-package magit
    :demand t
    :bind
    ("C-x C-g" . magit-status)
    :config
    (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))

  (use-package ibuffer-git)
#+end_src
** markdown
Specifically, GithubFlavoredMarkdown-mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("*\\.md\\'" . gfm-mode)
    :init
    (setq
     markdown-command      "multimarkdown"
     markdown-open-command "/usr/local/bin/mark")) ;; Opens application -> Marked2

  ;; Use visual-line-mode in gfm-mode
  (defun my-gfm-mode-hook ()
    (visual-line-mode 1))
  (add-hook 'gfm-mode-hook 'my-gfm-mode-hook)
#+end_src
** org
*** Base Package Definition
#+begin_src emacs-lisp
  (visual-line-mode 1)

  ;; -----------------------------------------------------------------------------
  ;; Packages
  ;; -----------------------------------------------------------------------------
  (use-package org
    :defer nil
    :bind (:map org-mode-map
                ("C-M-<return>" . org-insert-subheading)
                ("C-c l"        . org-store-link)
                ("C-c a"        . org-agenda)
                ("C-c |"        . org-table-create-or-convert-from-region)
                ("C-c C-<"      . org-promote-subtree)
                ("C-c C->"      . org-demote-subtree)
                ("C-<right>"    . org-metaright)
                ("C-<left>"     . org-metaleft)
                )
    :init
    (setq org-M-RET-may-split-line                 nil
          org-adapt-indentation                    t
          org-agenda-dim-blocked-tasks             'invisible
          org-agenda-files                         (directory-files-recursively "~/Repository/00-09 System/01 Org/" "\\.org$")
          org-catch-invisible-edits                'show-and-error
          org-default-notes-file                   (concat org-directory  "~/Repository/00-09 System/01 Org/gtd.org")
          org-directory                            "~/Repository/00-09 System/01 Org"
          org-ellipsis                             "▼"  ;; …, ↴ ⤵, ▼, ↴, ⬎, ⤷, ⋱
          org-enforce-todo-checkbox-dependencies   t
          org-enforce-todo-dependencies            t
          org-export-backends                      (quote (ascii html icalendar latex md odt))
          org-hide-emphasis-markers                t
          org-hide-leading-stars                   t
          org-id-prefix                            "ID" ;; We don't want simply numbers!
          org-image-actual-width                   '(300)
          org-link-search-must-match-exact-heading nil
          org-list-allow-alphabetical              t
          org-pretty-entities                      t
          org-return-follows-link                  t
          org-src-fontify-natively                 t
          org-src-window-setup                     'current-window ;; https://irreal.org/blog/?p=8824
          org-startup-folded                       t
          org-startup-indented                     t
          org-startup-with-inline-images           t
          org-use-fast-todo-selection              t
          org-use-speed-commands                   nil

          ;; https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html
          org-refile-targets                        '((org-agenda-files :maxlevel . 2))

          org-link-frame-setup '((vm      . vm-visit-folder-other-frame)
                                 (vm-imap . vm-visit-imap-folder-other-frame)
                                 (gnus    . org-gnus-no-new-news)
                                 (file    . find-file)  ;; Used to be find-file-other-window..
                                 (wl      . wl-other-frame))
          ))

  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

  ;; Allow for links like [[file:~/dev/foo][Code]] to open a dired on C-c C-o.
  ;; https://emacs.stackexchange.com/questions/10426/org-mode-link-to-open-directory-in-dired
  (add-to-list 'org-file-apps '(directory . emacs))
#+end_src
*** Supplemental Packages
**** babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (js         . t)
     (python     . t)
     (shell      . t)
     (sqlite     . t)
     ))
  (setq org-confirm-babel-evaluate nil)
#+end_src
**** prettify-symbols
  #+begin_src emacs-lisp
    (defun pb/load-prettify-symbols ()
      (interactive)
      (setq prettify-symbols-alist
            (mapcan (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
                    '(("#+begin_src"     . ?)
                      ("#+end_src"       . ?)

                      ("#+begin_example" . ?)
                      ("#+end_example"   . ?)

                      ("#+header:"       . ?)

                      (":properties:"    . ?)
                      (":end:"           . ?🛑)
                      )
                    )
            )
      )
    (add-hook 'org-mode-hook #'pb/load-prettify-symbols)
#+end_src
**** org-appear
 #+begin_src emacs-lisp
   (use-package org-appear
       :hook (org-mode . org-appear-mode))
 #+end_src
**** org-cliplink
 #+begin_src emacs-lisp
   (use-package org-cliplink
     :after 'org
     )
 #+end_src
**** org-modern-indent
 #+begin_src emacs-lisp
   (use-package org-modern-indent
     :load-path "~/.emacs.d/site-lisp/org-modern-indent/"
     ; or
     ; :straight (org-modern-indent :type git :host github :repo "jdtsmith/org-modern-indent"))
     :config ; add late to hook
     (add-hook 'org-mode-hook #'org-modern-indent-mode 90))
 #+end_src
**** org-pretty-table-mode
 #+begin_src emacs-lisp
   (use-package org-pretty-table
     :load-path "~/.emacs.d/site-lisp/org-pretty-table"
     :config
     (add-hook 'org-mode-hook (lambda () (org-pretty-table-mode))))
 #+end_src
**** org-superstar
 #+begin_src emacs-lisp
   ;; Nice(r) bullets (replaces org-bullets)
   (use-package org-superstar
     :config
     (setq org-superstar-special-todo-items t)
     (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
     )

   (setq org-superstar-item-bullet-alist
         '((?* . ?•)
           (?+ . ?➤)
           (?- . ?•)))
 #+end_src
**** org-web-tools
[[https://github.com/alphapapa/org-web-tools][GitHub - alphapapa/org-web-tools: View, capture, and archive Web pages in Org...]]
[[https://blog.nawaz.org/posts/2023/Mar/solving-a-scraping-problem-with-emacs-and-org-mode/][Solving a Scraping Problem with Emacs and Org Mode]] (Blog post demonstrating org-web-tools)
 #+begin_src emacs-lisp
   (use-package org-web-tools)
 #+end_src
*** Org Capture Templates (and GTD support)
#+begin_src emacs-lisp
  ;; ---------------------------------------------------------------------------
  ;; GTD
  ;; ---------------------------------------------------------------------------
  ;; Keywords: this sequence is on behalf of regular TO-DO items in my GTD world.
  (setq org-todo-keywords
        '((sequence
           "TODO(t)"
           "WORK(w)"
           "WAIT(a)"
           "|"
           "DONE(x)"
           )))

  ;; Format of DONE items
  (setq org-fontify-done-headline t)
  (set-face-attribute 'org-done          nil :foreground "gray36" :strike-through nil)
  (set-face-attribute 'org-headline-done nil :foreground "gray36" :strike-through nil)

  ;; Capture
  (define-key global-map (kbd "C-c c") 'org-capture)
  (setq org-capture-templates
        '(
          ("t" "GTD"      entry (file+headline "/Users/peter/Repository/00-09 System/01 Org/gtd.org" "INBOX") "** TODO %?\n\n")
          ("p" "Projects" entry (file          "/Users/peter/Repository/00-09 System/01 Org/projects.org"   ) "* TODO %?\n\n" :prepend t)
          ("j" "Journal"  entry (file+datetree "/Users/peter/Repository/00-09 System/01 Org/journal.org"    ) "*** %?")
          ))
#+end_src
*** Attachments
#+begin_src emacs-lisp
  ;; -----------------------------------------------------------------------------
  ;; Attachments
  ;; -----------------------------------------------------------------------------
  (setq org-attach-id-dir "/Users/peter/Repository/00-09 System/01 Org/repository-org-attach-style")
  (setq org-attach-method "mv")
  (add-hook 'dired-mode-hook
            (lambda ()
              (define-key dired-mode-map (kbd "C-c C-x a")
                (lambda ()
                  (interactive)
                  (let ((org-attach-method 'mv))
                    (call-interactively #'org-attach-dired-to-subtree))))))
#+end_src
** pbcopy
Allow interaction with MacOS clipboard and kill/yank ring in emacs.
#+begin_src emacs-lisp
  (use-package pbcopy)
#+end_src
** pdf
#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
    )
  (pdf-tools-install)
#+end_src
** postgresql
#+begin_src emacs-lisp
  (setq sql-postgres-program "/Applications/Postgres.app/Contents/Versions/latest/bin/psql")
  (add-hook 'sql-mode-hook 'sql-highlight-postgres-keywords)
  (add-hook 'sql-interactive-mode-hook 'sql-rename-buffer)

  ; Execute this after opening up SQL to get a scratch
  ; buffer from which to submit sql with C-c C-b
  (defun pgsql-scratch ()
    (interactive)
    (switch-to-buffer "*scratch*")
    (sql-mode)
    (sql-set-product "postgres")
    (sql-set-sqli-buffer)
    (sql-rename-buffer)
  )

  (defun upcase-sql-keywords ()
    (interactive)
    (save-excursion
      (dolist (keywords sql-mode-postgres-font-lock-keywords)
        (goto-char (point-min))
        (while (re-search-forward (car keywords) nil t)
          (goto-char (+ 1 (match-beginning 0)))
          (when (eql font-lock-keyword-face (face-at-point))
            (backward-char)
            (upcase-word 1)
            (forward-char))))))

  ;; (setq sql-connection-alist
  ;;     '(
  ;;       (bart
  ;;       (sql-product 'postgres)
  ;;       (sql-port 5432)
  ;;       (sql-server "localhost")
  ;;       (sql-user "django")
  ;;       (sql-password "--sorry, getme from environment--")
  ;;       (sql-database "bart-dw"))

  ;;       (bart-prod
  ;;       (sql-product 'postgres)
  ;;       (sql-port 5432)
  ;;       (sql-server "bartdw-prod.xxxxx.amazonaws.com")
  ;;       (sql-user "bartdw")
  ;;       (sql-password "--sorry, getme from environment--")
  ;;       (sql-database "bartdw"))

  ;;       (udp
  ;;       (sql-product 'postgres)
  ;;       (sql-port 5432)
  ;;       (sql-server "localhost")
  ;;       (sql-user "django")
  ;;       (sql-password "--sorry, getme from environment--")
  ;;       (sql-database "udp"))
  ;;      )
  ;; )

  ; Wrappers for quick startup (not used anymore past Energy Solutions)
  ;; (defun sql-bart-prod ()
  ;;   (interactive)
  ;;   (wrapper-sql-connect 'postgres 'bart-prod))

  ;; (defun sql-bart ()
  ;;   (interactive)
  ;;   (wrapper-sql-connect 'postgres 'bart))

  ;; (defun sql-udp ()
  ;;   (interactive)
  ;;   (wrapper-sql-connect 'postgres 'udp))

  (defun wrapper-sql-connect (product connection)
    (setq sql-product product)
    (sql-connect connection))
#+end_src
** rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                        :foreground 'unspecified
                        :inherit 'error)
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

  (use-package prog-mode
    :ensure nil
    :hook ((prog-mode . rainbow-delimiters-mode)))
 #+end_src
** rainbow-mode
   Display colour codes in the actual colour they represent, e.g. #0000ff (should be white text on a blue background)
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :demand t
    :hook (prog-mode)
    )
#+end_src
** ripgrep (aka rg)
   Use wgrep-save-all-buffers to save once changes have been committed after editing rg results buffer.
#+begin_src emacs-lisp
  (use-package rg
    :config
    (rg-enable-menu))

  ;; Separate these into 2 cases:
  ;; This one only works on selected text BUT doesn't prompt for directory or file type!
  (global-set-key (kbd   "<f5>") 'rg-dwim)
  ;; While this one prompts for something to query on but also asks for directory and type as well..
  (global-set-key (kbd "C-<f5>") 'rg-literal)
#+end_src
** savehist
#+begin_src emacs-lisp
  ;; Persist history over Emacs restarts (vertico sorts by history position)
  (use-package savehist
    :init
    (savehist-mode))
#+end_src
** shell
#+begin_src emacs-lisp
  (setq explicit-shell-file-name "/usr/local/bin/fish")
  (setq shell-pushd-regexp "push[d]*")
  (setq shell-popd-regexp   "pop[d]*")

  ;; Make git work within shell
  (setenv "PAGER"  "/bin/cat")
  (setenv "EDITOR" "/Applications/Emacs.app/Contents/MacOS/bin/emacsclient")
#+end_src
** text
#+begin_src emacs-lisp
  (setq text-mode-hook
        '(lambda ()
           (auto-fill-mode 0)
           (setq tab-width 4)
           (flyspell-mode)
           ))
  (setq default-major-mode 'text-mode)
#+end_src
** toml-mode
#+begin_src emacs-lisp
  (use-package toml-mode
    :defer t)
#+end_src
** vertico & orderless
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    :custom
    (vertico-cycle t)
    (vertico-scroll-margin 0)
    (vertico-count 10)
    )

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setq read-extended-command-predicate #'command-completion-default-include-p)

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** vterm
   "C-c C-t" to go into "buffer" mode (for copy/paste operations)
 #+begin_src emacs-lisp
   (use-package vterm
     :defer t
     :config
     (setq vterm-shell "/usr/local/bin/fish")
     :hook
     (vterm-mode . (lambda ()
                     (setq-local show-trailing-whitespace nil)))
     :custom
     (vterm-always-compile-module t))

   (global-set-key (kbd "<f12>")   'pb/vterm-current-directory)
   (global-set-key (kbd "C-<f12>") 'pb/vterm-by-name)
#+end_src
** vlf
#+begin_src emacs-lisp
  (use-package vlf)
#+end_src
** web-mode
#+begin_src emacs-lisp
  (use-package web-mode)

  (add-to-list 'auto-mode-alist '("\\.html$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.dhtml$" . web-mode))
  (setq web-mode-engines-alist '(("django" . "\\.html$")))

  ;; For IRIS, we've decided to have HTML indenting match Python:
  (defun my-web-mode-hook ()
    "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset    2)
    (setq web-mode-code-indent-offset   2)
    (setq web-mode-indent-style         2)
    )

  (add-hook 'web-mode-hook 'my-web-mode-hook)
#+end_src
** yaml-mode
#+begin_src emacs-lisp
  ;; NOT ready yet, needs emacs 29 for tree sitter support:
  ;; (use-package yaml-pro
  ;;   :defer t
  ;;   :hook
  ;;   (yaml-mode . yaml-pro-ts-mode))
#+end_src
** yasnippet
   While the majority of the time, I don't rely on snippets, there are a very select /few/ that I
   consider worthwhile, thus, keep use of yasnippets for now.
#+begin_src emacs-lisp
  ;; Don't do snippet expansion within comments/docstrings for py:
  ;; (https://stackoverflow.com/questions/25521897/how-to-never-expand-yasnippets-in-comments-and-strings)
  (defun yas-no-expand-in-comment/string ()
    (setq yas-buffer-local-condition
          '(if (nth 8 (syntax-ppss)) ;; non-nil if in a string or comment
               '(require-snippet-condition . force-in-comment)
             t)))

  (use-package yasnippet
    :config

    ;; Bind `SPC' to `yas-expand' when snippet expansion available (it will still call `self-insert-command' otherwise)
    (define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand)

    ;; Use the method above to keep snippets only when we're writing actual code.
    (add-hook 'prog-mode-hook 'yas-no-expand-in-comment/string)

    (yas-global-mode t))
#+end_src
* Custom Commands
  These are custom commands I used on regular basis (almost all of which are cribbed from others, credit given as much as possible!)
** Center window (aka frame) on current monitor
   [[https://christiantietze.de/posts/2022/04/emacs-center-window-current-monitor-simplified/]]
#+begin_src emacs-lisp
  (defun pb/recenter (&optional frame)
    "Center FRAME on the screen. FRAME can be a frame name, a terminal name, or a frame. If FRAME is omitted or nil, use currently selected frame."
    (interactive)
    (unless (eq 'maximised (frame-parameter nil 'fullscreen))
      (modify-frame-parameters
       frame '((user-position . t) (top . 0.5) (left . 0.5)))))
#+end_src
** Create new vterm/shell buffer (2 ways):
#+begin_src emacs-lisp
  (defun pb/vterm-current-directory ()
    "Create a terminal buffer from the current dired location"
    (interactive)
    (let ((shell-name (car (last (butlast (split-string default-directory "/"))))))
      (vterm (concat shell-name "@"))
      )
    )

  (defun pb/vterm-by-name ()
    "Create a terminal buffer based on name provided."
    (interactive)
    (let ((shell-name (read-string "Shell name: ")))
      (vterm (concat shell-name "@"))))
#+end_src
** Change case of text
   [[http://ergoemacs.org/emacs/modernization_upcase-word.html]]
#+begin_src emacs-lisp
  (defun pb/toggle-letter-case ()
    "Toggle the letter case of current word or text selection, toggles between: “all lower”, “Init Caps”, “ALL CAPS”."
    (interactive)
    (let (p1 p2 (deactivate-mark nil) (case-fold-search nil))
      (if (region-active-p)
          (setq p1 (region-beginning) p2 (region-end))
        (let ((bds (bounds-of-thing-at-point 'word) ) )
          (setq p1 (car bds) p2 (cdr bds)) ) )

      (when (not (eq last-command this-command))
        (save-excursion
          (goto-char p1)
          (cond
           ((looking-at "[[:lower:]][[:lower:]]") (put this-command 'state "all lower"))
           ((looking-at "[[:upper:]][[:upper:]]") (put this-command 'state "all caps") )
           ((looking-at "[[:upper:]][[:lower:]]") (put this-command 'state "init caps") )
           ((looking-at "[[:lower:]]") (put this-command 'state "all lower"))
           ((looking-at "[[:upper:]]") (put this-command 'state "all caps") )
           (t (put this-command 'state "all lower") ) ) )
        )

      (cond
       ((string= "all lower" (get this-command 'state))
        (upcase-initials-region p1 p2) (put this-command 'state "init caps"))
       ((string= "init caps" (get this-command 'state))
        (upcase-region p1 p2) (put this-command 'state "all caps"))
       ((string= "all caps" (get this-command 'state))
        (downcase-region p1 p2) (put this-command 'state "all lower")) )
      )
    )
  (global-set-key (kbd "M-l") 'pb/toggle-letter-case) ;; Overrides existing mapping
#+end_src
** Ctrl-A behaviour enhancement
   C-a now goes to logical beginning of line before going to physical beginning of one.
#+begin_src emacs-lisp
  (defun pb/key-back-to-indentation-or-beginning ()
    (interactive)
    (if (= (point) (progn (back-to-indentation) (point)))
        (beginning-of-line)))
#+end_src
** Fill/unfill with M-q
   http://endlessparentheses.com/fill-and-unfill-paragraphs-with-a-single-key.html
#+begin_src emacs-lisp
  (defun endless/fill-or-unfill ()
    (interactive)
    (let ((fill-column
           (if (eq last-command 'endless/fill-or-unfill)
               (progn (setq this-command nil)
                      (point-max))
             fill-column)))
      (call-interactively #'fill-paragraph)))

  (global-set-key [remap     fill-paragraph] #'endless/fill-or-unfill)
  (global-set-key [remap org-fill-paragraph] #'endless/fill-or-unfill)
#+end_src
** Smarter C-w (backward word kill)
[[https://github.com/magnars/.emacs.d/blob/master/defuns/editing-defuns.el]]
#+begin_src emacs-lisp
  ;; Here's a better C-w (kill region if active, otherwise kill backward word)
  (defun pb/kill-region-or-backward-word ()
    (interactive)
    (if (region-active-p)
        (kill-region (region-beginning) (region-end))
      (backward-kill-word 1)))

#+end_src
** Smarter Split Windows
https://macowners.club/posts/custom-functions-5-navigation/
#+begin_src emacs-lisp
  (defun pb/split-and-follow-below ()
    "Split the selected window in two with the new window is below. This uses `split-window-below' but follows with the cursor."
    (interactive)
    (split-window-below)
    (other-window 1)
    )

  (defun pb/split-and-follow-right ()
    "Split the selected window in two with the new window is to the right. This uses `split-window-right' but follows with the cursor."
    (interactive)
    (split-window-right)
    (other-window 1)
    )
#+end_src
** Toggle Window Split
https://macowners.club/posts/custom-functions-5-navigation/
#+begin_src emacs-lisp
  (defun pb/toggle-split-direction ()
    "Toggle window split from vertical to horizontal or vice-versa.
     Credit: https://github.com/olivertaylor/dotfiles/blob/master/emacs/init.el"

    (interactive)
    (if (> (length (window-list)) 2)
        (error "Sorry, can only toggle split direction with 2 windows.")
      (let ((was-full-height (window-full-height-p)))
        (delete-other-windows)
        (if was-full-height
            (split-window-vertically)
          (split-window-horizontally))
        (save-selected-window
          (other-window 1)
          (switch-to-buffer (other-buffer)))))
    )
#+end_src
** Kill this buffer
[[http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/]]
#+begin_src emacs-lisp
  ;; Kill *this* buffer
  (defun pb/-kill-this-buffer- ()
    "Kill the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'pb/-kill-this-buffer-)
#+end_src
** Line join
http://whattheemacsd.com/key-bindings.el-03.html]]
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c j") (lambda () (interactive) (join-line -1)))
#+end_src
** Scroll page without moving cursor
#+begin_src emacs-lisp
  (global-set-key "\M-n" (lambda () (interactive) (scroll-up 12)))
  (global-set-key "\M-p" (lambda () (interactive) (scroll-down 12)))
#+end_src
** Smarter open line
   [[http://emacsredux.com/blog/2013/03/26/smarter-open-line/]]
#+begin_src emacs-lisp
  (defun pb/key-smart-open-line ()
    "Insert an empty line after the current line. Position the cursor at its beginning, according to the current mode."
    (interactive)
    (move-end-of-line nil)
    (newline-and-indent))

  (defun pb/key-smart-open-line-above ()
    "Insert an empty line above the current line. Position the cursor at it's beginning, according to the current mode."
    (interactive)

    (move-beginning-of-line nil)
    (newline-and-indent)
    (forward-line -1)
    (indent-according-to-mode))

  (global-set-key (kbd "M-o") 'pb/key-smart-open-line)
  (global-set-key (kbd "M-O") 'pb/key-smart-open-line-above)
#+end_src
** Split current frame into evenly balanced "3"
#+begin_src emacs-lisp
  (fset 'pb/split3 (kmacro-lambda-form [?\C-x ?1 ?\C-x ?3 ?\C-x ?3 ?\C-x ?+] 0 "%d"))
#+end_src
** Switch over to lower-case org-mode properties (once per org-file)
   #+begin_src emacs-lisp
     (defun pb/lower-case-org-keywords ()
       "Lower case Org keywords and block identifiers.

     Example: \"#+TITLE\" -> \"#+title\"
              \"#+BEGIN_EXAMPLE\" -> \"#+begin_example\"

     Directly from very bottom of:
     https://github.com/howardabrams/hamacs/blob/main/ha-org-word-processor.org"

       (interactive)
       (save-excursion
         (goto-char (point-min))
         (let ((case-fold-search nil)
               (count 0)
               ;; All keywords can be found with this expression:
               ;; (org-keyword-re "\\(?1:#\\+[A-Z_]+\\(?:_[[:alpha:]]+\\)*\\)\\(?:[ :=~’”]\\|$\\)")
               ;; Match examples: "#+foo bar", "#+foo:", "=#+foo=", "~#+foo~",
               ;;                 "‘#+foo’", "“#+foo”", ",#+foo bar",
               ;;                 "#+FOO_bar<eol>", "#+FOO<eol>".
               ;;
               ;; Perhap I want the #+begin_src and whatnot:
               (org-keyword-re (rx line-start (optional (zero-or-more space))
                                   "#+" (group (or "BEGIN" "END") "_" (one-or-more alpha)))))
           (while (re-search-forward org-keyword-re nil :noerror)
             (setq count (1+ count))
             (replace-match (downcase (match-string-no-properties 1)) :fixedcase nil nil 1))
           (message "Lower-cased %d matches" count))))
   #+end_src
** Text/Font scaling interactively
   [[https://www.reddit.com/r/emacs/comments/ck4k2u/forgot_my_glasses/?utm_source=share&utm_medium=ios_app]]
#+begin_src emacs-lisp
  (defun set-font-everywhere (font-spec &optional all-frames)
    (when (null (assq 'font default-frame-alist))
      (add-to-list 'default-frame-alist '(font . "")))

    (setcdr (assq 'font default-frame-alist) font-spec)

    (dolist (f (if all-frames (frame-list) (list (selected-frame))))
      (with-selected-frame f (set-frame-font font-spec t))))

  (defun resize-font(font &optional n)
    (let* ((ff (split-string font "-"))
           (size (nth 7 ff))
           (sizen (string-to-number size))
           (n (or n 1))
           (new-size (max 1 (+ n sizen))))
      (setcar (nthcdr 7 ff) (number-to-string new-size))
      (cons (mapconcat 'identity ff "-") new-size)))

  (defun cur-font ()
    (cdr (assq 'font (frame-parameters (selected-frame)))))

  (defvar min-font-size 1)
  (defun change-font-size (&optional decrease times)
    (let* ((inc (* (or times 1) (if decrease -1 1)))
           (old-font (cur-font))
           (new-font-and-size (resize-font old-font inc))
           (new-font (car new-font-and-size))
           (size (cdr new-font-and-size)))
      (unless (equal old-font new-font)
        (set-font-everywhere new-font)
        (message (format "%d %s" size new-font)))))
  (defun increase-font-size(&optional n) (interactive) (change-font-size nil n))
  (defun decrease-font-size(&optional n) (interactive) (change-font-size t n))

  (define-key global-map (kbd "C-+") 'increase-font-size)
  (define-key global-map (kbd "C--") 'decrease-font-size)

#+end_src
** Use Insert key to toggle overwrite/insert
   [[https://emacs.stackexchange.com/questions/18533/how-to-use-the-insert-key-to-toggle-overwrite-mode-when-using-a-pc-keyboard-in]]
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    ;; when using Windows keyboard on Mac, the insert key is mapped to <help>
    ;; copy ctrl-insert, paste shift-insert on windows keyboard
    (global-set-key [C-help] #'clipboard-kill-ring-save)
    (global-set-key [S-help] #'clipboard-yank)

    ;; insert to toggle `overwrite-mode'
    (global-set-key [help] #'overwrite-mode))
#+end_src
* Startup
  We do these after everything else has been setup so we have commands available for key-mappings
** Base Key Mappings
*** Function Keys
#+begin_src emacs-lisp
  (global-set-key (kbd "<f1>")   'goto-line)
  (global-set-key (kbd "<f2>")   'toggle-truncate-lines)
  (global-set-key (kbd "<f3>")   'align-regexp)
  ;; <f4> still available!
  ;; <f5> Used for search
  ;; <f6> Used for search-replace
  (global-set-key (kbd "<f7>")   'kmacro-start-macro) ; Keyboard macro shortcuts (based on mid-80's Brief editor mappings ;-)
  (global-set-key (kbd "<f8>")   'kmacro-end-macro)
  (global-set-key (kbd "<f9>")   'call-last-kbd-macro)
  ;; <f10> still available! (but has an existing emacs assignment)
  ;; <f11> still available! (but used by MacOS to hide all windows and display desktop.)
  ;; <f12> Used to open a new vterm
#+end_src
*** Other Custom Key Mappings
#+begin_src emacs-lisp
  ;; Zygospore is installed from package-list-packages (can't seem to use-package it?), enable it here.
  ;; C-x 1 toggles between "current" buffer to fullscreen and existing buffer layout.
  (global-set-key (kbd "C-x 1") 'zygospore-toggle-delete-other-windows)

  ;; Better split windows
  (global-set-key (kbd "C-x 2") 'pb/split-and-follow-below)
  (global-set-key (kbd "C-x 3") 'pb/split-and-follow-right)

  ;; Toggle window split
  (global-set-key (kbd "C-x O") 'pb/toggle-split-direction)

  ;; Better "beginning of line"
  (global-set-key (kbd "C-a") 'pb/key-back-to-indentation-or-beginning)

  ;; Better "delete word backwards"
  (global-set-key (kbd "C-w") (lambda () (interactive) (pb/kill-region-or-backward-word)))
#+end_src
** Files to have open when we start
#+begin_src emacs-lisp
  (find-file "~/.emacs.d/config.org")
  (find-file "~/Repository/00-09 System/01 Org/reference/python.org")
  (find-file "~/Repository/00-09 System/01 Org/journal.org")
  (find-file "~/Repository/00-09 System/01 Org/gtd.org")

  ;; Start with this as file displayed on startup:
  (find-file "~/Repository/00-09 System/01 Org/projects.org")
#+end_src
** Window size and font management
   Which one?
   - M-x describe-font <cr> <cr>
   - M-x set-frame-font (Pick from list!)
#+begin_src emacs-lisp
  (defvar pb/font "-*-SauceCodePro Nerd Font Mono-light-normal-normal-*-%d-*-*-*-m-0-iso10646-1")

  ;; Define this individually for interactive use when we move between environments without restarting:
  (defun pb/font-size-monitor ()
    "Set 4K monitor font."
    (interactive)
    (set-frame-font (format pb/font 22))
    )

  (defun pb/font-size-laptop ()
    "Set laptop font."
    (interactive)
    (set-frame-font (format pb/font 16))
    )

  (setq ns-use-thin-smoothing t)
  (if (and (display-graphic-p)
           (>= (x-display-pixel-width) 3840))
      (progn
        (pb/font-size-monitor)
        (set-frame-width  (selected-frame) 272) ;; Note that these are a function of
        (set-frame-height (selected-frame)  67) ;; the fontsize listed right above!
        )
      (progn
        (when (and (display-graphic-p) (< (x-display-pixel-width) 3840))
          (pb/font-size-laptop)
          (set-frame-width  (selected-frame) 142) ;; Note that these are a function of
          (set-frame-height (selected-frame)  42) ;; the fontsize listed right above!
          )
        )
      )
#+end_src
* History
  |------------+-------------------------------------------------------------------|
  | 1990.07.13 | Make Systems (on Sunview).                                        |
  | 1991.06.07 | Teknekron (X using twm).                                          |
  | 1993.12.08 | Teknekron (emacs version 19).                                     |
  | 1994.03.26 | Added tcl initialisation logic.                                   |
  | 2006.01.08 | First real cleanup since the mid-90's (!).                        |
  | 2006.10.02 | Configured into AXA Rosenberg.                                    |
  | 2008.01.19 | Update/cleanup, addition of ECB, OrgMode.                         |
  | 2011.04.15 | Added multiplatform support for Ubuntu & MacOS.                   |
  | 2011.09.05 | Updated OrgMode for another attempt at GTD.                       |
  | 2011.09.05 | Final tweaks obo EnergySolutions environment.                     |
  | 2012.08.15 | Added support for Ropemacs & Pymacs for python IDE.               |
  | 2012.08.28 | Added support for GRIN integration.                               |
  | 2013.05.12 | Declaring dotemacs-bankruptcy! Moving to site-start architecture. |
  | 2020.06.10 | Test and discard of lsp, rebuilt venv for elpy (~/emacs-venv)     |
  | 2021.01.04 | Clean up of emacs folders.                                        |
  | 2021.11.28 | Moved to PARA file organisation for all main directories.         |
  | 2022.03.15 | Moved to support numbered file repository structure.              |
  | 2022.11.21 | Part of emacs bankruptcy and move to clean use-package approach.  |
  |------------+-------------------------------------------------------------------|
